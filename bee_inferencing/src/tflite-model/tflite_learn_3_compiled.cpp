/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 01.08.2025 13:00:04

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242656;
#else
constexpr int kTensorArenaSize = 241632;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[3] = { 10721, -20061, -20973, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00042694338480941951, 0.00024454042431898415, 0.00024430867051705718, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 19,78,127,-30,-62,0,78,11,-10,78,6,-27,-18,-51,61,-10,-29,35,40,55,-9,-12,-2,-39,-44,91,-80,9,31,88,-10,-3, 
  /* [1][0][][] */ 41,-23,-81,13,-7,126,-10,-10,127,-58,-1,-107,-59,99,25,-45,91,-61,16,-64,-105,21,90,79,48,-17,-1,-6,-79,-63,-10,-16, 
  /* [2][0][][] */ -62,45,-95,83,77,-37,-50,111,98,15,126,-20,-97,-83,80,109,-77,-50,3,-118,75,105,-33,-71,127,-54,-13,-118,26,-64,87,-17, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0053478856571018696, 0.0030631092377007008, 0.0030602063052356243, } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&g0::quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { 105, 242, 507, 151, 140, 205, 183, 153, 324, -153, 292, 1051, -877, -920, -1081, 163, -248, -908, -1381, -777, -943, 1, 216, -95, -45, -246, -553, -720, 600, 326, -635, -747, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.0764974730554968e-05, 5.6524510000599548e-05, 6.7369386670179665e-05, 6.4848580223042518e-05, 6.230679719010368e-05, 7.5540927355177701e-05, 7.9562269093003124e-05, 9.5051560492720455e-05, 6.2045452068559825e-05, 4.6782486606389284e-05, 5.9756850532721728e-05, 6.5162974351551384e-05, 4.6857818233547732e-05, 4.7920984798111022e-05, 5.0078662752639502e-05, 6.4419677073601633e-05, 8.8434193457942456e-05, 6.9652880483772606e-05, 7.3328403232153505e-05, 7.6370692113414407e-05, 5.016197610530071e-05, 7.7030941611155868e-05, 6.0205980844330043e-05, 5.3621752158505842e-05, 0.00011014708434231579, 5.8648121921578422e-05, 0.00010363833280280232, 4.4832890125690028e-05, 6.6719177993945777e-05, 6.1341976106632501e-05, 4.4153039198135957e-05, 4.5511806092690676e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -23,-41,86,42,101,-34,-70,-49,80,-60,-82,-28,34,15,-21,56,-56,-37,-57,-54,-70,-87,0,95,-91,-7,63,-39,80,28,-9,-14,44,-32,-104,57,-106,-61,-55,33,68,-80,-96,89,53,-81,84,-23,14,-113,-27,77,-60,11,-100,75,30,54,57,-90,-78,63,-62,36,-1,30,62,96,41,79,67,-127,72,-63,26,79,-68,7,-48,95,43,13,64,18,-45,-43,-82,108,11,121,-23,16,3,63,47,-2, 
  /* [1][0][][] */ -50,28,-40,28,-50,35,29,33,62,-93,-75,62,34,-13,29,46,82,-34,38,51,-42,6,30,22,16,-7,-31,99,-30,-47,85,-39,22,77,1,24,38,39,-29,-47,-53,8,-8,-59,-19,25,-28,-30,-24,-127,12,49,33,74,-80,-33,29,54,46,60,-49,61,-67,-66,1,28,68,51,47,35,-13,7,-95,73,-32,45,52,-34,-29,27,-61,55,-44,-84,27,90,-51,-63,57,55,67,-83,64,35,-26,30, 
  /* [2][0][][] */ -9,16,11,58,-123,21,66,73,-54,58,-28,80,80,-16,75,-77,-19,-18,61,-37,-71,7,86,23,-33,47,81,65,-15,-23,68,31,-74,-32,-57,-73,-7,47,100,-25,-83,-65,7,15,-46,73,-41,-42,63,0,54,-75,-21,-15,33,23,-64,29,-14,4,-27,100,-65,19,65,31,51,51,-127,62,15,-76,24,-48,29,50,-78,1,10,39,25,-67,9,-47,10,-69,-17,-37,55,95,29,-53,-47,-7,-23,-35, 
  /* [3][0][][] */ 69,9,1,-18,-127,-37,-74,38,25,3,53,-14,40,78,65,-3,77,71,-71,-15,82,-53,-41,-71,-52,-99,-87,41,5,-102,61,41,-75,-9,-11,-5,-72,3,-6,30,0,-74,-64,17,60,24,-12,-41,35,-90,-32,25,70,60,36,-80,-41,-106,-80,-34,-66,-10,-18,-22,50,-4,-37,-23,-61,-74,-23,52,-7,-63,63,-40,3,65,61,-57,-54,-115,39,46,28,38,-25,-92,-49,53,-55,-77,67,-94,-56,-7, 
  /* [4][0][][] */ 71,70,-33,56,7,-127,25,28,30,46,3,27,6,-9,-7,-45,-18,2,-43,43,81,-61,59,18,-11,7,41,-51,-66,75,-37,-4,58,97,31,-61,-47,11,-85,35,-22,-26,-62,-63,29,65,44,39,26,-18,-102,-23,-30,67,-102,2,41,-87,-4,10,20,-116,2,-34,9,35,1,-16,31,-81,-105,-37,-33,19,74,26,68,-16,-4,-71,4,-30,-92,2,6,61,62,-6,-79,-56,-42,7,36,-11,-83,1, 
  /* [5][0][][] */ 28,-58,35,11,31,-82,22,3,57,-39,4,-36,-11,64,26,33,43,46,-73,78,27,32,14,-9,-65,-38,-4,-68,33,39,0,-39,-25,-14,-58,-12,-62,-11,-1,15,-41,-26,22,55,-18,19,28,-19,-68,50,56,21,1,-5,18,-24,59,41,-62,-15,19,-34,21,-21,-53,65,-12,-15,61,-30,71,-34,-35,58,-15,-44,28,-24,11,45,70,20,18,54,-41,52,6,35,47,-49,56,127,1,6,51,-89, 
  /* [6][0][][] */ -51,-34,110,38,-116,-9,5,37,-3,-61,7,-75,55,20,75,-65,34,-5,25,-3,-50,-48,67,40,-80,-66,-3,-3,-1,-127,26,-53,-103,-79,-12,-82,36,3,-34,46,36,17,15,11,-72,69,-74,-16,-57,-59,-13,-55,-1,-54,83,-7,-4,-38,81,57,-81,35,4,-102,-8,47,70,-10,-31,7,-45,-24,62,-77,-29,5,-49,-42,-26,14,9,-16,39,-21,-37,-58,-30,-52,44,70,86,-16,-61,-28,47,1, 
  /* [7][0][][] */ 62,27,-32,-10,-28,-17,-6,2,46,-11,-39,-3,9,-29,25,31,25,12,-29,61,27,19,-3,40,-40,47,20,16,-68,44,-5,31,9,16,39,42,-54,46,-23,-12,48,-27,31,32,28,-7,57,-47,25,-82,-127,-18,-19,53,-11,11,55,-62,-13,-27,7,-45,43,-47,-5,-25,33,15,-48,3,0,46,35,17,29,22,-23,24,-44,-6,43,-21,-25,-29,44,22,-47,36,38,1,7,-24,-18,-61,-28,-23, 
  /* [8][0][][] */ 6,13,-62,-82,64,-34,-43,-29,-6,42,41,62,-36,-9,-49,-37,-37,83,-90,52,37,-13,61,83,-97,70,36,26,-58,46,-62,121,59,-23,29,-22,76,22,-51,52,72,84,-81,-81,0,-13,11,91,9,-93,-33,22,-64,10,-46,-87,34,77,-127,82,94,5,45,113,-9,-24,-11,46,-27,7,14,16,42,69,11,4,1,76,63,17,38,55,-85,-53,29,44,66,-19,38,-21,-101,121,-32,-118,-31,22, 
  /* [9][0][][] */ -4,11,120,41,94,-87,-53,-97,26,56,-21,55,4,-81,-95,-34,3,-12,-55,-47,-15,91,-100,-104,109,-12,-14,51,1,-50,-77,87,41,-16,24,-20,-53,-5,3,-51,24,-68,71,-86,69,15,-123,48,27,-1,-87,-62,96,-84,-46,108,73,-54,14,-11,-93,116,61,-88,-36,-11,98,37,-47,127,107,-94,12,86,-82,-80,-72,-107,-43,80,18,33,98,15,-46,-105,27,-36,79,17,-3,83,93,-16,38,14, 
  /* [10][0][][] */ -29,55,43,-31,-3,-33,83,34,18,6,26,-65,45,76,-16,7,-23,64,-91,-26,-10,27,42,-48,15,40,-82,-88,-78,56,-59,-31,60,81,100,50,-39,15,-45,27,-17,96,-93,-25,-60,-52,13,-34,3,-97,-98,29,65,39,-79,-31,-65,-46,-11,-33,3,-7,93,45,127,-55,-65,-7,26,-32,-114,-36,55,60,-56,71,5,45,51,-25,60,-9,11,82,-64,61,76,-29,27,6,-55,-126,-26,-105,-71,-38, 
  /* [11][0][][] */ 117,41,51,127,46,92,59,61,95,58,-29,52,48,-32,47,-25,-35,-66,71,-90,34,79,40,-55,-32,-70,-4,88,75,-42,39,-32,-9,22,117,86,-19,50,13,-7,-10,93,-47,22,-19,-39,-73,-45,105,36,80,26,-40,16,71,79,-25,-62,89,-40,-38,100,57,-55,121,56,-2,86,-19,88,-45,-21,82,29,-42,73,-48,49,-8,107,-80,31,6,-27,34,-48,22,-30,-66,14,76,-101,-78,75,-26,49, 
  /* [12][0][][] */ -7,42,-69,-16,55,-8,-53,15,-89,31,-34,-9,-29,-10,23,-94,-113,-51,-42,-96,5,-29,-5,68,-85,-67,70,-109,63,-11,-53,85,-96,-83,-62,-6,-25,-90,-34,20,84,15,-120,-57,-41,-96,-58,86,-62,-127,-83,74,37,-17,-95,57,-34,-68,58,40,35,85,-26,36,86,9,-62,91,27,77,42,45,67,83,-36,-23,-53,12,-127,-100,-75,77,25,-5,-54,8,30,84,-106,-118,71,19,71,-37,9,54, 
  /* [13][0][][] */ 95,-70,63,87,66,77,55,34,65,-110,-9,-24,91,47,39,-53,-127,-83,-74,-14,41,-46,83,-64,-46,14,-16,0,-83,-77,55,19,26,87,-26,26,-96,-36,-23,41,-67,50,-71,-15,-60,8,-17,-50,23,97,-49,-121,-106,30,58,-93,-56,19,-77,-83,-43,101,-82,-2,-69,-70,-102,59,-34,-27,75,-19,-99,18,-70,-57,-123,38,53,-32,24,-111,72,-6,-93,-115,57,91,-30,-57,-81,38,85,-31,54,-26, 
  /* [14][0][][] */ -53,-103,50,32,53,-43,-41,-100,-90,-52,31,55,-28,-84,-107,-88,-66,-81,-3,2,-53,4,-21,27,-119,-77,-58,9,-116,-108,-86,14,69,-49,-53,-13,64,81,36,-119,-24,-125,18,56,41,-99,35,-100,76,20,66,25,69,-39,-28,-8,-56,-1,45,69,-14,-96,-47,36,-100,-39,43,-93,-93,-93,-90,74,-11,54,18,-82,25,-112,22,10,10,-30,-102,-43,-127,-100,-110,74,73,-21,54,-58,62,63,-24,41, 
  /* [15][0][][] */ 37,-12,-31,76,69,-100,43,-40,37,-15,-39,-13,63,12,-54,-77,57,7,-88,13,32,17,49,73,51,47,26,57,-25,33,55,-43,7,22,-20,10,-53,84,71,-40,18,87,-38,-11,25,-59,-18,-52,1,-121,-114,38,-41,-34,-56,-9,56,7,-38,71,-30,-92,13,70,20,64,-44,24,-59,9,5,-38,12,-10,41,-72,0,37,73,23,-56,35,-104,-27,-74,-16,-62,16,53,44,-127,-88,39,17,-101,98, 
  /* [16][0][][] */ -56,-6,40,-58,26,49,-28,-6,18,44,-57,41,-19,-28,-30,-24,54,39,14,46,54,33,-22,23,-15,26,-34,21,-37,30,9,6,-52,22,15,18,-15,24,-34,-37,9,-28,28,36,23,53,49,-4,-34,-46,57,50,-39,38,32,17,10,57,14,7,55,67,11,41,-6,6,-23,23,39,25,-2,-8,15,45,29,35,5,44,-56,-1,7,-38,31,0,2,45,50,12,40,5,-10,127,36,-14,-23,-21, 
  /* [17][0][][] */ 14,-74,-11,40,-15,-76,-60,-71,16,-72,33,5,52,20,-90,9,-1,17,127,80,-72,-29,-12,-55,3,22,-62,13,36,-58,-30,37,-7,-28,-6,-1,-54,48,-66,-36,-74,-40,-26,-29,-4,-12,37,-87,32,82,-7,-3,11,36,49,-57,-90,45,-80,-88,7,-55,33,52,-74,-62,5,-75,-7,-15,72,7,-15,-80,-53,17,55,-52,7,-19,-9,-32,-65,-71,-86,27,32,-36,-3,33,-45,-79,-20,64,-10,-5, 
  /* [18][0][][] */ -87,38,39,-38,-14,-55,-88,-6,-7,34,-94,-40,-11,-13,10,-47,-20,-47,49,18,43,-59,-19,-79,7,-72,-17,40,-10,-10,-14,24,-5,-33,-71,-70,-40,-6,3,27,-52,-33,-51,-30,-88,-11,-13,-30,-8,37,127,11,-60,23,-2,37,-44,42,64,-102,49,55,-23,7,-52,-97,-51,77,25,-23,-61,30,-38,-36,-73,-91,-1,1,-35,-79,-62,-24,-31,-43,28,-54,18,37,-74,-51,-25,86,22,-54,54,-6, 
  /* [19][0][][] */ 3,-4,32,16,21,-23,42,37,31,-61,1,6,-63,2,-43,15,23,-75,127,26,-27,29,-49,-8,38,-53,6,-33,-58,-81,-52,12,44,-62,14,-18,-10,-50,-46,-72,11,-76,-70,-10,-62,-1,28,-69,-24,110,-35,12,2,-11,-3,-15,13,35,59,-34,18,-40,48,29,-48,-17,-30,-10,-19,20,45,-38,-44,-72,-52,-62,-24,-81,-7,56,15,-79,-28,25,-64,-18,-16,-19,34,3,2,15,-31,51,19,-27, 
  /* [20][0][][] */ -10,45,50,75,-102,47,-6,65,-11,-20,-88,-16,3,61,16,-85,-64,-62,-40,-32,0,-55,-81,-86,30,-94,-105,46,3,-20,-32,91,65,19,-13,34,22,-48,-15,-104,-95,-48,-88,-90,-45,-64,-77,77,36,-127,-127,17,40,77,41,-12,54,39,75,58,70,-50,-85,-60,-20,-76,-58,16,-90,-64,-74,49,-55,-86,5,3,73,48,72,57,48,1,53,-30,31,83,-22,39,-4,65,11,32,3,-7,-21,21, 
  /* [21][0][][] */ 65,43,20,-61,28,-99,34,8,-17,-50,-41,22,-17,27,-18,-60,-61,-12,11,-51,57,-31,35,-54,-3,-70,-29,23,-21,-18,-6,-1,-18,6,-94,-72,47,61,-127,-21,2,-6,9,-1,-43,-46,-32,55,-20,-99,-71,36,16,47,-54,16,-46,13,-94,62,23,-79,0,-58,71,20,-21,-27,-95,-13,2,31,1,1,53,26,-77,-25,27,44,7,37,6,-62,17,-51,38,-63,-68,57,31,-80,-24,-68,30,-27, 
  /* [22][0][][] */ 8,-31,-54,-104,48,-86,86,19,-87,100,-55,-88,85,-74,-68,-62,30,68,-122,-25,69,-46,26,23,73,8,-66,88,-36,-127,-34,-57,42,40,4,1,1,-2,-47,-84,8,-1,-1,61,50,-79,70,-8,-33,-113,98,-24,-86,-80,-35,29,-46,-23,-88,-21,78,-52,-62,-19,-82,10,-72,-56,90,51,-19,8,-52,31,49,-61,40,-35,49,78,77,-74,-31,-100,62,62,75,-34,-37,34,-53,97,19,22,-12,39, 
  /* [23][0][][] */ 22,-75,-10,-3,92,-117,9,-127,32,-78,57,74,-4,-94,22,-32,74,-30,-126,103,71,-74,79,-28,8,-9,63,11,75,14,52,-37,-38,25,13,23,81,7,-119,-6,-75,-6,-11,-100,-32,-88,94,30,69,-94,-61,-35,5,-53,-19,75,-80,-24,34,36,-109,-59,-41,3,-21,32,-103,-118,76,-48,83,-65,-19,10,-34,-89,33,-23,71,76,-38,-52,3,-116,78,6,76,-16,-71,38,92,19,79,-33,-23,29, 
  /* [24][0][][] */ -23,-3,-45,-28,-127,-44,-38,-51,19,57,32,-32,36,29,0,-83,-36,16,-10,-53,41,-48,-26,-17,-68,-50,18,2,14,-14,6,-7,-63,15,23,17,-42,-19,-36,-17,-22,-74,38,24,29,1,25,31,-53,-59,29,9,13,62,26,-32,17,6,-16,-11,45,-37,15,20,-16,45,-29,-29,-100,10,-66,-43,-29,60,80,33,-5,-38,-50,-34,-34,-60,1,-64,4,25,-17,-61,10,3,-48,5,-6,-3,24,0, 
  /* [25][0][][] */ -77,-53,-33,19,43,21,-64,52,38,-72,-54,13,58,-41,-72,-37,-44,12,26,-127,20,80,-10,-50,5,-46,-85,60,95,-116,27,62,54,-94,78,47,85,-72,-20,-40,-89,51,-82,-1,62,2,5,28,-86,53,-23,-40,67,-23,-25,1,-10,28,-101,51,54,105,-7,68,0,37,14,-9,-29,36,-1,-104,26,-92,39,25,29,54,-1,6,5,4,-3,23,-67,-73,-93,-100,-36,-32,122,1,-111,101,-9,-33, 
  /* [26][0][][] */ 52,-49,-32,-17,-7,-31,-18,-23,-52,-33,34,52,-34,-22,-14,-12,35,16,-55,-23,11,8,32,-4,15,27,-6,-5,4,77,-47,2,22,-15,-34,-29,-43,39,-46,31,-42,31,23,2,-34,31,-12,25,-2,127,68,50,-8,4,-17,-51,55,52,-12,6,20,-57,43,-9,25,-17,-45,0,-18,23,45,39,26,-43,-31,-21,15,-54,-52,15,-16,41,42,-28,23,-2,-32,10,-34,38,-15,104,-10,37,60,22, 
  /* [27][0][][] */ -4,-8,-73,-111,-127,-76,-80,-29,27,76,21,-116,-2,39,63,-43,49,-32,72,-92,-103,-3,-42,-36,-121,30,-117,-15,49,14,-45,-24,43,50,-99,-99,-101,-77,-120,71,-105,2,13,1,79,9,49,84,69,52,43,-85,-57,-98,-20,-46,81,-38,-122,-89,-69,-72,-47,39,23,-59,-120,88,34,-4,-98,-6,43,-64,-25,-97,32,-78,70,80,67,-41,97,-67,-85,-94,-46,15,-59,-19,-43,-62,40,3,69,40, 
  /* [28][0][][] */ 65,11,90,60,-100,8,-51,-33,-10,-70,48,37,-28,-53,20,71,66,83,-71,13,-19,30,-58,-40,-57,58,-35,-29,-50,-114,19,-6,-56,29,66,72,20,-62,-39,30,74,34,-49,44,-45,3,11,39,34,-70,-127,-18,-75,38,70,65,41,-8,79,39,-19,-18,-67,11,48,54,2,75,-65,62,-70,-30,64,46,10,-46,-94,-31,-44,46,-45,-50,46,-1,51,-66,47,-53,-69,-25,10,-107,-38,71,-57,15, 
  /* [29][0][][] */ -2,48,95,-51,-93,83,-78,10,82,5,-65,-72,109,-80,-20,-30,-57,74,68,-101,-60,-8,53,12,-20,-12,-8,31,-63,-61,85,-33,26,-11,-63,-29,31,56,17,59,25,68,-29,77,0,80,-60,-15,17,-23,61,-77,45,-112,107,40,-63,30,35,78,-96,127,-94,-27,-24,-39,53,51,23,-37,45,-68,97,43,58,50,39,-25,-16,56,-1,-41,13,-59,48,75,28,51,-28,83,83,6,-93,62,7,55, 
  /* [30][0][][] */ 27,-81,-80,23,-99,18,-81,-25,103,-19,-16,-42,-98,17,36,11,-21,20,84,-115,40,-115,-127,-4,-121,5,-83,96,-19,-105,-98,2,-82,-82,-122,-65,-2,-32,-14,12,71,-85,-28,78,81,-46,89,41,-78,73,16,-101,83,-57,-30,81,-78,-54,-80,-59,-101,-21,-83,-36,-110,-96,-109,82,-68,93,46,-36,-87,84,22,-101,-59,-85,-88,-65,15,26,-103,-23,-120,12,-106,104,-37,-127,61,53,-33,-12,6,-80, 
  /* [31][0][][] */ 68,-99,23,90,30,44,-73,-106,-43,-34,-89,-100,104,-127,-59,88,-74,-102,53,28,45,20,-42,85,27,-119,18,23,-85,-86,32,87,7,10,-91,-19,76,-43,-76,-108,42,-79,-44,16,-10,-66,-51,7,56,9,96,-45,-116,-63,-93,11,-118,59,13,92,-16,-19,66,-81,56,89,-57,-42,53,-125,-123,-4,-101,-52,-7,-7,-73,-57,31,106,-89,-51,72,55,38,76,-99,-1,0,-67,-86,-69,-6,82,-14,-16, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0021575114224106073, 0.0024022916331887245, 0.0028631987515836954, 0.0027560647577047348, 0.0026480387896299362, 0.0032104894053190947, 0.0033813964109867811, 0.0040396912954747677, 0.0026369316037744284, 0.0019882556516677141, 0.002539666136726737, 0.0027694262098520994, 0.0019914573058485985, 0.0020366418175399303, 0.0021283430978655815, 0.0027378362137824297, 0.0037584530655294657, 0.0029602472204715014, 0.0031164570245891809, 0.0032457544002681971, 0.0021318839862942696, 0.0032738149166107178, 0.0025587540585547686, 0.0022789244540035725, 0.0046812510117888451, 0.0024925451725721359, 0.0044046291150152683, 0.0019053977448493242, 0.0028355650138109922, 0.002607033820822835, 0.00187650416046381, 0.0019342517480254173, } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&g0::quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { -2650, 3983, 10888, 2873, -4990, -3388, 16482, 3119, 3293, -2084, 15193, -708, -9702, 2214, 22085, 7109, 13349, 3985, -6053, -5854, 5390, 19737, 32357, 25075, 841, 1069, 4101, 3875, 2716, -4840, 8621, -2850, -385, 4154, -141, 713, 12392, 4418, -2039, 6060, 8639, 6944, 4865, 13794, 2926, 6693, 1537, 7616, 5986, -4390, -3857, 220, -237, -1139, 2908, -84, -19, -1147, -2735, 12966, -1041, 1448, -1917, -2781, -3919, 13848, 17630, 2355, -2937, 679, 1373, 3321, 1822, -1549, 257, 12698, -757, 22124, 23126, -1214, 9084, 2280, -834, 662, 14750, 11399, 4636, 1170, 6624, 5004, -79, -7149, 392, -2256, -2829, -2191, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00023216530098579824, 0.00038399195182137191, 0.00021161876793485135, 0.00033326001721434295, 0.00019589184375945479, 0.00044070836156606674, 0.00019654167408589274, 0.00022471969714388251, 0.00017468709847889841, 0.0003500700113363564, 0.00011902469850610942, 0.00021726226259488612, 0.00027391724870540202, 0.0012223651865497231, 0.0001368137018289417, 0.0001564462436363101, 0.00013322904123924673, 0.00035790872061625123, 0.00030778947984799743, 0.00028731380007229745, 0.00010869781544897705, 0.00012943075853399932, 9.3760616437066346e-05, 6.5296990214847028e-05, 0.00017183573800139129, 0.00042066583409905434, 0.00067621085327118635, 0.00027033931110054255, 0.00018942217866424471, 0.00038947522989474237, 0.00016352106467820704, 0.00030348487780429423, 0.00016042878269217908, 0.00026366845122538507, 0.0004283406597096473, 0.00024529820075258613, 0.00014833544264547527, 0.0002360568760195747, 0.00029279032605700195, 0.00027440258418209851, 0.00014092256606090814, 0.00036975496914237738, 0.00031562329968437552, 0.00016529650019947439, 0.00061488983919844031, 0.00014041013491805643, 0.00032165646553039551, 0.0002644576015882194, 0.00021786097204312682, 0.00028169751749373972, 0.0003849375934805721, 0.00018922693561762571, 0.00044712171074934304, 0.000334695796482265, 0.00030540270381607115, 0.0002335988829145208, 0.00033842193079181015, 0.00027460252749733627, 0.00052286143181845546, 0.00013788418436888605, 0.0006829790654592216, 0.00051449734019115567, 0.00013922686048317701, 0.00037289937608875334, 0.00047928220010362566, 0.00012882046576123685, 0.00012129775859648362, 0.00012680586951319128, 0.00039779051439836621, 0.00042333288001827896, 0.00024968542857095599, 0.00012073606922058389, 0.00072717497823759913, 0.00031402288004755974, 0.00026506310678087175, 0.00016769673675298691, 0.00024705228861421347, 8.2824815763160586e-05, 7.7053518907632679e-05, 0.00020967260934412479, 0.00015927718777675182, 0.00013466074597090483, 0.00019891008560080081, 0.00016640206740703434, 0.00011650274973362684, 0.00020876385679002851, 0.00050303456373512745, 0.00013076257891952991, 0.00010152262257179245, 0.00040733956848271191, 0.00031341606518253684, 0.00026566721498966217, 0.00019025473739020526, 0.00049670349108055234, 0.00023939809761941433, 0.00022689711477141827, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -38,49,-36,-127,-53,-33,-63,-56,-46,18,-13,78,16,-106,19,43, 
  /* [1][0][][] */ -19,40,-104,28,-58,-7,13,-74,92,86,-55,41,-8,12,33,-127, 
  /* [2][0][][] */ 38,-35,-10,64,82,77,13,17,63,-16,30,-42,5,97,-127,-76, 
  /* [3][0][][] */ 58,-35,23,-56,20,8,-92,-2,70,-43,81,25,-12,13,13,127, 
  /* [4][0][][] */ -118,59,127,41,72,-39,-26,45,-94,-102,-13,-12,-116,10,-5,-18, 
  /* [5][0][][] */ 32,-1,127,21,-10,91,-33,63,-22,122,-4,11,-4,-42,-96,-13, 
  /* [6][0][][] */ 66,-5,50,-61,29,42,-121,24,-26,-107,31,29,-21,74,-10,127, 
  /* [7][0][][] */ 39,85,1,-25,104,35,-48,-36,127,84,-8,64,69,19,47,54, 
  /* [8][0][][] */ 25,-38,9,-85,57,-30,-13,-56,23,59,91,-33,-1,106,80,127, 
  /* [9][0][][] */ 65,-25,-52,127,23,-11,25,-61,1,85,33,1,22,-43,-38,7, 
  /* [10][0][][] */ 10,40,-15,-125,32,37,-39,39,48,0,41,-127,-3,-44,74,-1, 
  /* [11][0][][] */ -17,46,35,-6,110,-8,56,-52,-100,9,43,42,-13,127,-63,-37, 
  /* [12][0][][] */ 19,-10,-127,-21,22,-12,1,-15,14,20,-12,-58,-10,95,9,78, 
  /* [13][0][][] */ -9,4,-26,-2,-3,-127,-2,23,34,9,9,0,16,-23,17,17, 
  /* [14][0][][] */ 81,-16,63,21,86,75,-127,-45,56,-1,93,31,44,-5,-59,-68, 
  /* [15][0][][] */ -36,29,-70,-44,-2,25,127,30,8,90,91,-62,-52,80,67,26, 
  /* [16][0][][] */ 32,69,127,73,68,32,55,44,-67,6,-45,-51,-26,15,30,-36, 
  /* [17][0][][] */ -23,-80,6,29,-31,-25,-38,-4,-127,-12,-1,-46,12,19,48,-34, 
  /* [18][0][][] */ -52,47,-106,56,119,35,36,-9,63,-7,-6,-42,53,127,127,48, 
  /* [19][0][][] */ -22,127,94,29,76,59,-78,-66,-115,-87,-30,-125,-105,-2,23,-69, 
  /* [20][0][][] */ 34,-20,-6,-67,1,-127,2,-4,-101,-6,-110,-9,9,-43,76,10, 
  /* [21][0][][] */ 62,-40,-12,71,62,60,28,127,8,-35,29,-11,-112,116,-28,78, 
  /* [22][0][][] */ -24,60,7,127,-31,2,49,48,-48,74,-41,57,0,-31,8,-30, 
  /* [23][0][][] */ 65,8,110,-104,88,-34,-2,64,-36,16,3,-127,-19,-14,-127,107, 
  /* [24][0][][] */ -127,40,-37,-3,-46,113,13,-49,14,9,77,17,-110,1,75,-12, 
  /* [25][0][][] */ 9,23,8,3,3,-2,50,-60,-22,-127,-14,-32,-26,-44,1,56, 
  /* [26][0][][] */ -12,7,-9,21,-28,16,-49,-34,-50,-3,56,-19,25,127,-67,60, 
  /* [27][0][][] */ 16,29,7,69,47,-26,-20,-37,70,-1,-11,30,17,127,-20,21, 
  /* [28][0][][] */ 114,21,37,88,127,31,-35,60,-49,-23,-22,-25,28,109,6,1, 
  /* [29][0][][] */ -16,21,18,-18,34,-13,-2,37,-42,5,-1,-127,-17,-14,-23,33, 
  /* [30][0][][] */ 5,81,-80,117,-25,39,44,-127,-7,71,41,8,106,67,60,64, 
  /* [31][0][][] */ 1,15,3,-2,28,28,-47,-76,48,79,23,-127,-3,-18,27,38, 
  /* [32][0][][] */ -127,-40,-8,29,-8,-1,-5,9,-29,-48,-96,49,16,-25,38,96, 
  /* [33][0][][] */ -25,0,-49,-8,-83,1,-84,-15,35,14,-1,-20,7,-127,116,61, 
  /* [34][0][][] */ 53,-4,35,2,39,13,-20,36,-67,-36,54,-9,-17,-17,3,127, 
  /* [35][0][][] */ -49,48,-100,43,-16,14,-30,-112,119,127,-64,-9,-41,-38,100,-50, 
  /* [36][0][][] */ 40,39,24,127,122,75,85,-27,-28,-21,-4,-22,-30,87,-73,-108, 
  /* [37][0][][] */ 9,15,-16,-41,-18,12,-62,-46,-64,-10,3,28,0,-127,37,0, 
  /* [38][0][][] */ 87,114,-97,12,120,-32,58,-50,127,55,-50,37,-14,-69,26,52, 
  /* [39][0][][] */ -27,26,-11,-127,-7,16,-17,57,56,-9,13,-66,31,78,19,33, 
  /* [40][0][][] */ -8,-33,-50,-82,-41,19,-39,-25,-82,-23,-5,-5,-32,-127,74,-8, 
  /* [41][0][][] */ -12,-10,-58,-25,-18,-12,-5,-7,-19,0,-31,21,-127,-13,26,74, 
  /* [42][0][][] */ 127,42,-16,-3,-15,-39,41,-20,1,9,38,-59,-50,77,9,-121, 
  /* [43][0][][] */ 36,25,-60,48,114,24,116,-26,103,100,24,-19,79,-16,-127,-88, 
  /* [44][0][][] */ 16,11,8,-14,50,-17,-52,-127,-9,33,-7,0,0,-36,57,-55, 
  /* [45][0][][] */ 38,51,-127,46,100,-25,125,-1,30,38,44,-97,66,73,-54,-60, 
  /* [46][0][][] */ 11,-13,12,-68,20,-10,26,-40,-127,-8,10,-4,-6,-91,63,-29, 
  /* [47][0][][] */ 24,33,42,-4,127,-6,-13,25,-49,42,9,22,31,16,104,-48, 
  /* [48][0][][] */ -127,-39,-100,35,50,67,-25,-54,28,-10,-61,62,64,-16,76,113, 
  /* [49][0][][] */ 34,-33,83,46,59,-56,127,2,-86,11,-9,-57,16,58,10,-81, 
  /* [50][0][][] */ 37,-24,-41,43,3,-127,29,-19,12,13,-25,8,56,-47,32,40, 
  /* [51][0][][] */ 38,-15,55,-5,34,-10,-5,12,-85,75,11,-127,34,-93,5,58, 
  /* [52][0][][] */ 6,46,10,84,57,0,16,51,62,50,-21,-8,35,127,44,-1, 
  /* [53][0][][] */ 27,-36,-2,0,-44,16,-75,-2,26,33,14,-84,34,-127,91,-18, 
  /* [54][0][][] */ 60,43,-74,50,127,121,-92,8,-72,-34,-22,-27,45,10,-37,-24, 
  /* [55][0][][] */ 127,-79,-102,45,127,-5,-120,-112,-1,-114,-103,11,-17,31,24,9, 
  /* [56][0][][] */ -4,6,-7,-21,15,-16,-65,47,-13,127,31,-69,29,4,2,35, 
  /* [57][0][][] */ 14,-19,-36,-27,-15,-43,127,94,-27,69,6,-13,65,19,60,-13, 
  /* [58][0][][] */ 15,13,-127,-14,49,8,-19,28,-42,-40,-43,-5,-27,8,11,-12, 
  /* [59][0][][] */ -77,88,93,39,-53,-36,102,127,11,31,44,-21,24,21,65,-17, 
  /* [60][0][][] */ -5,3,6,-17,17,-127,3,-4,-45,-12,-21,-19,22,-15,-2,-14, 
  /* [61][0][][] */ 22,-2,1,127,49,18,9,18,-36,17,18,27,-28,4,4,-22, 
  /* [62][0][][] */ -72,92,-7,-101,-71,-47,-113,44,-61,-127,-123,-32,-34,-100,-24,12, 
  /* [63][0][][] */ -30,53,30,127,-43,35,-80,-50,-41,-27,-12,-41,-27,64,16,11, 
  /* [64][0][][] */ 25,-60,33,62,12,4,-77,32,40,29,-19,-38,-48,-127,44,-37, 
  /* [65][0][][] */ 58,-61,-9,-84,127,33,2,-46,38,84,64,-116,77,42,13,-77, 
  /* [66][0][][] */ 51,-8,-6,27,1,31,-4,69,51,-18,49,17,-1,127,-57,15, 
  /* [67][0][][] */ 23,15,-81,-113,52,36,-72,21,119,-92,13,6,90,127,72,60, 
  /* [68][0][][] */ -44,15,127,35,33,20,8,-2,-65,-55,-12,-16,-56,1,113,-15, 
  /* [69][0][][] */ 96,26,16,11,-49,20,-54,-18,25,18,127,-25,-49,56,1,-54, 
  /* [70][0][][] */ 30,6,-25,-7,-6,12,47,127,-31,109,-8,-12,32,51,-23,-9, 
  /* [71][0][][] */ 2,-1,-26,-15,-29,-83,3,32,-26,-11,-88,44,-127,-12,61,57, 
  /* [72][0][][] */ 19,0,-127,9,15,26,2,44,-31,-32,19,-12,24,6,1,17, 
  /* [73][0][][] */ 3,40,85,17,61,-38,-91,-127,21,-32,22,0,65,-48,6,-91, 
  /* [74][0][][] */ 21,21,56,102,0,5,-107,51,-48,7,7,51,125,-107,20,-127, 
  /* [75][0][][] */ 12,32,-52,10,13,6,-9,-6,127,30,1,11,24,81,-69,24, 
  /* [76][0][][] */ -22,57,-2,34,10,6,-36,63,25,-30,-23,-127,-39,28,-19,21, 
  /* [77][0][][] */ -9,59,3,94,-45,13,71,127,-24,76,-29,19,-50,-48,-7,15, 
  /* [78][0][][] */ 15,73,61,-127,43,-30,-76,28,-9,-67,-1,-39,0,96,66,86, 
  /* [79][0][][] */ 21,-55,-44,-44,-42,16,-3,-96,127,38,80,35,39,58,21,-25, 
  /* [80][0][][] */ -47,-20,127,-60,36,-63,37,-64,-93,13,-51,-57,-6,50,27,-22, 
  /* [81][0][][] */ -52,53,-124,1,48,-127,1,66,-18,-32,52,-3,-4,-9,24,20, 
  /* [82][0][][] */ 127,-10,-17,50,41,-80,1,40,6,-32,-77,-15,83,31,-26,1, 
  /* [83][0][][] */ -40,37,-64,-101,-36,-20,105,-55,76,63,-24,-127,0,59,49,71, 
  /* [84][0][][] */ 21,19,27,37,27,15,13,-127,-16,1,7,-19,61,64,34,-29, 
  /* [85][0][][] */ -69,110,49,-119,-29,-68,-4,-10,-127,-2,-99,-14,-5,-6,-57,-18, 
  /* [86][0][][] */ -20,-8,8,15,-7,-43,127,17,-29,-33,-27,-2,10,23,64,-49, 
  /* [87][0][][] */ -15,-29,-7,-107,44,-6,76,6,20,67,16,-127,-34,49,1,-36, 
  /* [88][0][][] */ 77,30,96,-21,68,-127,25,10,-92,28,-117,-81,16,45,14,45, 
  /* [89][0][][] */ 35,7,-41,7,20,33,-42,-24,1,-21,38,-8,127,24,-9,3, 
  /* [90][0][][] */ 27,-127,65,-5,43,20,-89,34,46,-57,-55,-17,-12,58,9,-95, 
  /* [91][0][][] */ 14,-57,-43,-34,-22,1,5,-67,36,96,45,-127,56,-47,13,-8, 
  /* [92][0][][] */ -19,34,69,23,13,-127,21,3,8,-12,10,-13,6,-14,41,-5, 
  /* [93][0][][] */ 47,5,127,-11,-52,78,25,-1,2,47,-20,18,-32,4,-4,1, 
  /* [94][0][][] */ -1,-38,-55,-34,9,19,43,-9,15,-3,45,-68,127,-5,4,-34, 
  /* [95][0][][] */ 127,21,-18,72,-71,-1,-51,9,-7,9,106,-31,-85,-1,86,-44, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00061006995383650064, 0.0010090308496728539, 0.00055607903050258756, 0.00087572052143514156, 0.00051475275540724397, 0.0011580667924135923, 0.00051646033534780145, 0.0005905048456043005, 0.0004590321914292872, 0.00091989286011084914, 0.00031276591471396387, 0.00057090865448117256, 0.00071978318737819791, 0.0032120575197041035, 0.00035951077006757259, 0.0004110999871045351, 0.00035009122802875936, 0.00094049092149361968, 0.00080879061715677381, 0.00075498584192246199, 0.00028562956140376627, 0.00034011033130809665, 0.00024637847673147917, 0.00017158349510282278, 0.00045153958490118384, 0.0011054002679884434, 0.0017769059631973505, 0.00071038131136447191, 0.00049775216029956937, 0.0010234394576400518, 0.00042969075730070472, 0.00079747923882678151, 0.00042156505514867604, 0.00069285201607272029, 0.0011255677090957761, 0.00064457976259291172, 0.00038978693191893399, 0.00062029599212110043, 0.00076937675476074219, 0.00072105851722881198, 0.00037030782550573349, 0.00097161979647353292, 0.00082937581464648247, 0.00043435615953058004, 0.0016157703939825296, 0.00036896127858199179, 0.00084522942779585719, 0.00069492572220042348, 0.00057248189114034176, 0.00074022769695147872, 0.0010115157347172499, 0.00049723911797627807, 0.0011749194236472249, 0.00087949342560023069, 0.00080251874169334769, 0.00061383703723549843, 0.00088928471086546779, 0.00072158395778387785, 0.0013739437563344836, 0.00036232374259270728, 0.0017946910811588168, 0.0013519650092348456, 0.00036585194175131619, 0.00097988243214786053, 0.0012594287982210517, 0.00033850662293843925, 0.00031873892294242978, 0.00033321281080134213, 0.0010452899150550365, 0.0011124085867777467, 0.00065610825549811125, 0.00031726295128464699, 0.0019108264241367579, 0.00082517036935314536, 0.00069651682861149311, 0.00044066336704418063, 0.00064918905263766646, 0.00021764205303043127, 0.00020247658540029079, 0.00055096502183005214, 0.00041853898437693715, 0.00035385339288040996, 0.00052268389845266938, 0.0004372613038867712, 0.00030613888520747423, 0.00054857705254107714, 0.0013218438252806664, 0.00034361000871285796, 0.00026677502319216728, 0.0010703823063522577, 0.00082357582869008183, 0.00069810426793992519, 0.00049993989523500204, 0.0013052074937149882, 0.00062907586107030511, 0.00059622654225677252, } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { -15771, 29387, -21245, 1286, -39255, 13362, -8774, -64824, 5035, 16155, 8162, 24185, -26238, -15234, 15092, 11676, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00063092185882851481, 0.00029314207495190203, 0.00016729412891436368, 0.00018107565119862556, 0.00025053857825696468, 0.00028647910221479833, 0.00038538197986781597, 0.00019694157526828349, 0.00023126631276682019, 0.00031525178928859532, 0.00047883755178190768, 0.00046036648564040661, 0.0002991714864037931, 0.00021254846069496125, 0.00036816316423937678, 0.00043426267802715302, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ 6,-8,-6,-39,-3,-10,11,-13,17,-7,13,8,-13,-5,-10,25,11,13,1,14,32,19,-13,33,21,7,41,127,30,-8,42,1,24,31,7,-9,-39,-1,-35,4,0,3,26,1,1,29,11,-27,31,21,-8,41,7,-10,-18,31,8,5,-17,-21,17,35,-16,0,-13,-36,-16,13,17,41,20,-15,-34,-24,-3,-18,-72,30,6,25,-6,-17,14,-9,-9,7,-1,-45,17,-4,0,14,39,7,0,-11, 
  /* [1][0][][] */ 1,-51,-49,-65,127,-1,17,57,-42,-77,-68,-33,-13,-9,-80,89,-42,-25,60,5,-64,6,34,-49,14,44,-105,-96,54,-32,-54,3,-16,-23,38,40,80,8,8,-17,-64,41,-48,-10,-17,91,9,23,62,-106,14,-106,-8,-15,70,-14,-68,-33,30,-45,20,-70,35,-99,-80,80,-14,35,-62,-19,-67,35,38,-118,-30,22,112,-42,3,-17,9,-22,-20,25,7,55,-83,15,10,-26,0,-11,29,-14,55,54, 
  /* [2][0][][] */ 51,29,-40,-7,52,-13,-5,122,-18,-127,-34,-20,-22,-7,32,47,15,-37,-44,80,37,102,114,-1,57,18,3,-35,78,-11,69,-75,75,53,-59,47,8,-61,65,44,-58,15,4,18,40,-7,25,19,53,32,-63,0,48,3,-12,43,68,10,64,-61,33,-4,-4,-60,46,13,-37,-7,-11,-32,-21,-54,-64,-23,1,43,52,19,65,63,-1,-49,-19,-22,-57,18,-9,57,-35,-35,25,-6,24,-59,-88,-70, 
  /* [3][0][][] */ 41,-31,79,-41,12,-67,65,-46,-33,-12,-14,9,22,30,52,124,-25,31,41,29,127,-35,58,46,59,6,40,27,42,38,-38,99,-92,120,54,-62,-59,-30,-7,21,-79,6,37,1,23,59,-54,-59,-30,8,-58,72,-4,-101,-41,-3,-94,18,37,34,16,68,-60,-9,77,27,-5,-96,30,19,-11,-41,6,-1,12,14,-48,20,73,29,-79,-57,13,-48,4,14,93,28,24,-51,-20,68,41,98,75,-31, 
  /* [4][0][][] */ 46,5,-8,-31,87,-58,40,-43,-34,-63,-12,-34,-56,25,21,94,10,-73,-27,110,2,122,13,58,30,18,92,11,29,3,84,-46,127,89,-24,-4,-25,-6,13,5,-34,2,11,-60,-1,2,-25,-47,76,56,-34,55,-21,18,-47,-98,67,-34,33,31,-32,75,19,30,90,72,-8,-51,-10,70,24,50,-31,-64,-100,-21,-22,49,89,-5,-23,-38,-10,-73,-41,41,88,81,19,27,8,-22,-1,78,47,-12, 
  /* [5][0][][] */ -26,-21,-22,3,-2,-40,59,-40,-13,-26,-31,41,-4,24,-2,59,2,39,-3,21,60,-16,-59,70,36,-23,40,-50,-7,41,10,40,-15,34,6,-60,-2,17,-20,33,3,-10,8,-34,-17,9,2,-21,-9,15,13,15,15,-31,-16,-67,-19,-3,-32,13,85,10,-36,73,23,45,9,45,12,117,-8,16,-15,13,-5,87,-55,14,15,3,-30,10,2,-14,-7,23,38,127,12,0,-30,33,10,35,4,6, 
  /* [6][0][][] */ 32,-46,-36,-20,-19,-28,63,23,32,-45,35,8,-25,28,2,-3,11,4,28,13,5,127,60,34,33,51,20,-37,15,11,35,-5,78,50,34,-20,9,21,52,5,-36,59,37,5,21,45,-17,-17,-28,58,-29,47,-20,-22,-28,3,52,-39,24,-20,20,66,42,-33,58,-27,4,-9,10,6,87,10,-40,21,3,-3,-17,-5,23,46,20,15,-8,-3,30,8,30,30,48,11,63,-54,-5,24,-13,1, 
  /* [7][0][][] */ 65,101,65,15,105,11,19,8,-29,-3,71,21,-11,-22,3,-33,13,-56,-10,32,96,64,81,-31,-21,19,113,36,-6,-6,-12,-5,79,16,-8,-31,-4,-11,33,85,-76,40,95,35,-40,38,3,-96,-65,-23,-57,34,-18,-58,-98,85,82,44,18,2,-16,-7,-34,17,-102,80,-43,-127,17,-60,31,73,13,50,-34,-87,50,44,53,17,-3,-101,-49,-67,-50,55,44,31,-48,22,37,-52,11,52,11,32, 
  /* [8][0][][] */ -43,-11,74,-3,-109,-22,54,-43,36,61,45,69,26,27,6,5,-20,42,-20,17,32,-38,-118,47,11,-45,69,-7,13,45,-45,100,49,-8,17,-61,-78,-10,-12,78,29,-34,24,-5,-56,-24,46,15,-70,27,41,71,-19,-43,-11,31,-15,-71,-127,-7,70,-8,-51,74,-4,61,-3,-45,16,0,-35,2,-4,58,82,34,-59,5,15,8,-101,40,-5,3,-10,53,94,54,38,-58,6,102,39,20,92,31, 
  /* [9][0][][] */ 14,-112,-22,19,-1,26,-3,8,60,-61,97,121,-8,13,19,-32,0,-14,-26,19,-38,23,6,13,-17,22,29,39,-41,12,-24,27,57,53,-47,57,-32,29,56,68,1,-23,11,38,-22,4,-44,-13,-2,3,-34,16,24,12,-30,-29,51,7,-41,7,48,8,-19,127,-34,-14,20,-6,-7,-6,-11,-42,30,32,21,17,-19,-40,15,-1,-10,-14,-10,26,-19,-19,-28,44,28,-34,-2,56,-18,20,21,-24, 
  /* [10][0][][] */ -20,-39,-41,-43,-35,-3,85,-35,47,2,21,86,-1,-11,24,23,29,37,-23,22,44,28,-17,44,23,-4,73,-69,41,-5,77,-20,5,30,-14,17,-37,32,10,30,6,-30,30,-61,-10,42,31,-6,17,62,-5,15,-22,14,-30,-87,25,15,-30,-49,64,23,-29,49,-2,76,-11,-40,18,8,1,-23,-61,-4,12,49,-37,37,-3,34,-31,19,2,1,2,5,40,127,19,-28,4,51,39,30,61,-48, 
  /* [11][0][][] */ -90,13,59,-25,10,-55,0,-17,-64,60,-54,36,40,5,-32,4,33,10,-75,-31,26,-123,8,-12,39,-1,44,-7,-36,32,-57,52,-47,25,32,-20,-36,-1,46,16,-12,1,-19,-1,82,4,77,58,55,23,18,36,14,-98,44,21,-127,-27,-58,-3,-5,-25,-26,39,-9,-39,4,-6,11,53,-8,78,-24,-3,46,47,-44,122,-80,37,-76,-10,-53,-57,88,15,83,-18,2,30,-62,-31,-1,42,14,3, 
  /* [12][0][][] */ 36,-3,-63,-6,10,-4,48,-15,32,6,57,2,8,4,30,33,-8,26,0,0,4,35,-25,56,16,67,39,127,-42,13,-31,16,-5,53,21,57,-76,-19,19,-7,-26,-2,40,-24,-8,0,14,-22,-9,9,-3,4,-37,38,-50,-44,27,-30,32,-2,-8,11,-19,57,58,-42,6,2,-16,-80,40,37,-29,10,-24,33,-80,-2,-11,19,-1,27,-44,-19,41,-25,-14,-29,2,-13,11,22,-67,19,21,17, 
  /* [13][0][][] */ -50,45,-6,-15,-34,-18,49,-10,-7,-61,62,39,72,14,12,33,12,30,5,18,61,91,46,13,83,39,57,-6,29,1,-23,-59,-30,34,17,-35,-42,27,32,29,-25,59,55,-1,56,58,10,-40,75,38,17,91,-4,-34,16,-46,21,21,42,12,33,48,-29,25,20,-1,-5,-31,28,61,36,-60,-20,15,-80,-19,-2,46,6,15,45,-9,-5,-44,53,1,127,46,33,3,-3,17,9,16,37,9, 
  /* [14][0][][] */ -5,-27,16,-65,44,-17,-30,24,-127,22,2,-16,-20,-27,-82,-63,-111,-9,52,-23,-19,-55,31,-103,-56,-21,-103,-58,12,-43,-8,4,-74,-24,12,50,46,-1,14,5,4,63,-69,23,-22,25,-34,23,115,-57,29,-21,13,32,-41,36,0,8,-68,33,-49,14,24,-6,24,18,0,29,-73,-52,3,15,81,-19,-16,-11,63,-119,-22,-88,11,-57,8,44,2,-70,-56,-45,-49,25,36,47,-12,16,-4,-40, 
  /* [15][0][][] */ -32,-36,10,-35,39,38,-22,-67,-38,73,-63,-25,19,-26,40,-32,-76,-39,-10,3,-7,-80,-73,-55,-43,-36,-24,8,-18,5,74,-36,-24,-22,20,22,8,11,-89,13,59,-79,-56,30,-19,-49,38,2,57,-28,22,-127,16,6,22,37,-11,-7,-50,38,9,-49,0,8,-15,-7,-14,30,-37,14,-3,54,27,6,30,-12,3,8,-19,-38,17,59,30,67,-27,-20,-25,-10,-47,104,-5,42,-5,2,3,17, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.026814179494976997, 0.012458537705242634, 0.0071100001223385334, 0.0076957149431109428, 0.010647889226675034, 0.012175361625850201, 0.016378734260797501, 0.0083700167015194893, 0.0098288180306553841, 0.013398200273513794, 0.020350595936179161, 0.019565574824810028, 0.012714788317680359, 0.0090333092957735062, 0.015646934509277344, 0.018456162884831429, } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { 27032, 65073, 185, -2437, 21162, -4838, -1011, -3235, 2635, 18768, -1386, 1918, -45, 10060, 2877, -10805, -4632, -295, 576, 16051, -11494, 26962, -4586, 11170, 31310, -872, -4637, 16579, 16721, -19785, 1922, 19552, 32804, -17657, 1719, 2588, 2293, 712, 2097, -15151, -2533, -1426, -10536, -178, 30993, 383, 11780, -9181, -15354, -6262, -119, 4395, -8244, 16436, -4658, 18133, 20345, -375, 55168, -218, -11388, -1937, -857, -117, 2006, 21669, -1051, -5835, -320, 3908, -3712, -8831, -784, -2504, -3852, -6576, -5280, -3013, 49753, -7985, -6214, -12465, 1014, 898, 83477, -16736, -15958, -29066, -9214, 8128, -4436, 20066, 1084, -5937, -1568, -268, };
const TfArray<96, float> quant10_scale = { 96, { 9.3614136858377606e-05, 8.8854219939094037e-05, 0.00011906080908374861, 0.0001923204108607024, 0.0001901579526020214, 0.00016259153198916465, 6.1568425735458732e-05, 0.00010923069930868223, 0.00020079163368791342, 0.00015744070697110146, 0.00023118032549973577, 0.00013661253615282476, 0.00022860594617668539, 0.00017975381342694163, 0.00034076638985425234, 0.00012355425860732794, 0.00020306595251895487, 0.00020210686489008367, 0.00021624819783028215, 6.3787832914385945e-05, 7.4955714808311313e-05, 5.2882485761074349e-05, 0.00014105663285590708, 5.7901554100681096e-05, 7.8124816354829818e-05, 0.00010993215983035043, 0.00016410069656558335, 0.00019858205632772297, 7.0166905061341822e-05, 0.00052120833424851298, 0.00039766659028828144, 0.00027192226843908429, 9.3423346697818488e-05, 9.3526286946143955e-05, 0.0002684585633687675, 0.00045791943557560444, 0.00048282774514518678, 0.00020103351562283933, 0.00019290439377073199, 5.023439007345587e-05, 0.00020150509953964502, 0.00020708554075099528, 0.00039319528150372207, 0.0001459105551475659, 0.00032762694172561169, 8.8843800767790526e-05, 9.0464520326349884e-05, 0.0002552236255723983, 0.00059592438628897071, 0.0001078245768439956, 0.00080150103894993663, 0.00017589259368833154, 8.2531209045555443e-05, 0.00021536613348871469, 0.00016407502698712051, 0.0001032520885928534, 0.00015148409875109792, 0.00036130307125858963, 3.2017502235248685e-05, 0.00014374109741766006, 0.0002855149214155972, 0.00029107643058523536, 0.00011262721091043204, 0.00019174588669557124, 0.00013128534192219377, 8.9644468971528113e-05, 0.00020597706316038966, 0.00037599026109091938, 0.00020170012430753559, 9.6696116088423878e-05, 0.00015170573897194117, 9.9955126643180847e-05, 0.00027061637956649065, 0.00014503333659376949, 0.00019476210582070053, 0.00028056575683876872, 0.00010752068919828162, 7.1859467425383627e-05, 5.1146056648576632e-05, 0.00015647296095266938, 0.00019006416550837457, 0.00022687177988700569, 0.00015486842312384397, 0.00030032411450520158, 4.243122020852752e-05, 8.4737708675675094e-05, 7.6578471635002643e-05, 0.00049937760923057795, 0.00027399513055570424, 0.00011056803487008438, 0.0003182962245773524, 5.5904074542922899e-05, 0.00015025514585431665, 0.00010142421524506062, 0.00034513731952756643, 0.00029390546842478216, } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -51,-68,-7,127,19,44,114,-68,-9,-10,-19,0,-27,-3,44,41,-13,-47,23,22,42,-84,126,22,-80,5,61,-31,-99,-127,40,37,-17,27,79,-26,-35,-15,38,-6,-13,31,-95,59,28,-90,40,63,-15,68,-20,24,0,-8,28,46,-92,-49,-62,-18,-7,-5,19,50,68,-25,77,18,-13,29,27,127,27,25,24,-3,-4,32,127,-1,-22,26,-39,14,127,12,-88,-15,1,-27,-16,-29,5,-28,-17,26, 124,-127,75,108,-45,127,72,-111,82,9,-13,127,127,-101,-6,32,12,127,125,-110,127,-64,88,68,-100,-106,-54,-36,-57,53,-60,-22,-88,79,-127,-78,-51,-19,-49,45,-8,127,127,69,-59,-127,-127,-50,-15,-110,42,78,61,-32,40,90,-55,40,-104,-109,-36,-42,-55,73,74,-66,16,29,-90,19,-10,99,127,127,6,8,16,75,-36,71,76,127,127,-21,-10,65,-124,127,-106,-110,10,-127,-88,-127,-44,109, -82,-13,29,-79,7,-27,96,0,102,-33,-23,33,-12,-12,-4,9,-6,-4,4,0,-7,-113,48,20,-122,103,-8,-56,127,58,-15,15,-32,68,22,-44,-25,30,28,16,28,22,-98,73,15,-44,33,27,-15,24,-14,10,-5,0,-11,28,-79,0,-56,44,-8,41,33,10,-10,-43,-32,24,-9,10,-1,34,16,-26,-13,8,-1,10,-90,2,-21,-10,-23,6,-117,10,-32,-21,-40,27,-20,-46,24,-29,-16,3, 
  /* [0][1][][] */ -68,-70,70,-37,-50,52,-4,127,-50,-25,-11,-127,23,-110,79,34,1,-64,-20,85,48,-70,52,56,-119,-6,127,-22,-50,65,119,-118,-127,100,-87,-54,-44,27,-31,98,-69,-27,-7,28,-51,111,-19,78,17,101,12,-6,20,-58,27,34,127,120,-74,-90,127,-31,-27,127,67,-38,-20,0,127,47,127,93,-44,104,17,14,25,17,-33,19,-47,102,-91,110,2,47,-47,33,86,-127,-30,16,127,-63,-27,-5, 70,127,55,-108,127,59,56,37,-127,127,127,-49,-73,-127,-127,127,127,-69,-127,-50,66,101,-127,127,-81,-80,-42,127,-112,113,-127,-127,-57,127,112,127,127,-127,-113,127,-79,-106,97,-127,-127,-35,-121,-127,127,-110,76,33,127,127,127,-127,109,-127,-127,127,21,-71,-127,-102,-127,127,-127,127,-116,-120,-101,-79,-124,-77,127,127,-127,127,-78,127,127,40,-50,-127,61,127,94,55,127,18,127,15,-74,38,127,-127, -66,-17,-51,34,-59,-89,54,-21,29,-41,-36,108,9,67,15,17,1,68,-8,125,11,-97,-35,34,-91,90,-84,-20,-74,-27,21,-68,-81,89,-3,-27,-32,39,-71,51,127,-7,-30,26,-44,-59,14,59,4,127,-13,1,-27,-80,-12,25,89,1,-31,16,-26,127,98,-53,-47,11,29,-5,-82,127,-13,-75,4,-51,-21,-9,30,26,75,-30,-75,-31,62,11,-55,-11,84,26,14,73,-38,21,-48,96,-25,-4, 
  /* [0][2][][] */ -67,-1,-3,-15,8,-47,51,34,46,-38,-46,-18,14,10,-27,-3,-6,66,10,-4,-38,-82,5,-4,-14,-25,39,-69,72,37,23,40,-15,28,-23,-46,-20,29,-1,33,-28,-8,-62,88,3,37,8,34,-17,-26,14,-27,34,-3,10,15,-77,29,-52,12,22,-8,-13,-6,-11,-49,-40,21,-29,33,28,38,7,-19,34,8,32,1,-67,-9,-12,-10,8,16,-124,28,23,-46,-47,-63,-29,-53,5,69,-27,-8, 127,30,-127,-25,-73,-21,22,24,-67,-32,-23,-121,-88,88,-14,41,-4,-50,-6,-127,75,-81,-37,3,-127,127,-48,21,-60,-22,-5,18,-87,43,23,4,-27,-34,127,76,12,-8,61,-39,-37,78,-63,-42,-32,-1,-127,-127,-42,-23,2,41,-70,-1,-2,45,-3,-11,17,-55,-55,29,50,-20,104,109,-21,-59,14,-60,-1,5,106,1,56,9,14,-98,-59,0,2,15,127,39,-57,42,-17,-85,36,86,-15,32, -61,12,-21,29,10,-55,-127,9,-9,-25,-25,11,23,-43,17,-13,-9,-10,8,9,-39,-127,18,40,1,-79,11,1,-81,-46,-9,32,2,19,-13,-36,-39,-1,44,-35,33,3,-37,-22,1,71,20,25,-9,12,17,-20,29,-2,-19,-1,-83,-17,-38,-37,-5,12,98,-18,30,-5,-9,24,-7,23,-5,31,-21,12,-2,21,50,-4,76,-15,1,-14,-12,-18,72,12,48,-39,50,37,-14,-56,-21,10,-16,-13, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0039786007255315781, 0.0037763041909784079, 0.0050600841641426086, 0.0081736175343394279, 0.0080817127600312233, 0.0069101401604712009, 0.0026166581083089113, 0.0046423044987022877, 0.0085336444899439812, 0.0066912299953401089, 0.0098251635208725929, 0.0058060325682163239, 0.0097157526761293411, 0.0076395366340875626, 0.014482571743428707, 0.0052510560490190983, 0.0086303027346730232, 0.0085895415395498276, 0.0091905482113361359, 0.0027109829243272543, 0.003185617970302701, 0.0022475055884569883, 0.0059949066489934921, 0.0024608159437775612, 0.0033203046768903732, 0.0046721165999770164, 0.0069742794148623943, 0.0084397373721003532, 0.0029820932541042566, 0.02215135283768177, 0.016900829970836639, 0.011556696146726608, 0.0039704921655356884, 0.0039748670533299446, 0.011409488506615162, 0.019461575895547867, 0.020520178601145744, 0.0085439244285225868, 0.0081984363496303558, 0.0021349615417420864, 0.0085639664903283119, 0.0088011352345347404, 0.016710799187421799, 0.0062011983245611191, 0.013924145139753819, 0.0037758613470941782, 0.003844741964712739, 0.010847004130482674, 0.025326786562800407, 0.0045825443230569363, 0.03406379371881485, 0.0074754352681338787, 0.0035075761843472719, 0.0091530606150627136, 0.0069731883704662323, 0.0043882136233150959, 0.006438074167817831, 0.01535538025200367, 0.001360743772238493, 0.0061089964583516121, 0.01213438343256712, 0.012370748445391655, 0.0047866562381386757, 0.0081492001190781593, 0.0055796271190047264, 0.0038098900113254786, 0.0087540252134203911, 0.01597958616912365, 0.0085722552612423897, 0.0041095847263932228, 0.006447493564337492, 0.004248092882335186, 0.011501195840537548, 0.0061639165505766869, 0.008277389220893383, 0.011924044229090214, 0.0045696292072534561, 0.0030540272127836943, 0.0021737073548138142, 0.0066501004621386528, 0.008077726699411869, 0.009642050601541996, 0.0065819080919027328, 0.012763774953782558, 0.0018033267697319388, 0.0036013524513691664, 0.0032545849680900574, 0.021223548799753189, 0.01164479274302721, 0.0046991412527859211, 0.013527588918805122, 0.0023759230971336365, 0.0063858437351882458, 0.004310529213398695, 0.014668336138129234, 0.012490982189774513, } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 205, 10992, 17115, 18619, 28514, -3476, -3007, 13981, 35479, -3415, 9017, 3845, 9942, 13760, 32863, 2008, 2113, 5870, 15233, 5818, 532, 2530, 12450, -1450, 4844, -389, 11580, 9728, 5555, 59492, 42215, 22548, 11759, -1114, 16512, 5335, 7124, 10016, 18132, -1243, 14586, 11339, 41160, -4644, 45091, 7084, 5413, 30806, 78821, 7127, -1851, 10186, -6873, -1946, -2295, 6341, 1007, 24001, 6676, 6279, 5601, 14736, 10703, 7087, 13400, 10594, 4674, -8728, 6902, -1903, 4170, 14044, 24416, 8361, -4769, -5352, 7519, 497, 1571, -1824, 29274, 20531, 8670, 19038, 4067, 182, 10035, 83576, 10426, 14953, 9466, -1627, 8317, 8621, 10827, 25420, };
const TfArray<96, float> quant12_scale = { 96, { 0.00023281907488126308, 0.00014734476280864328, 0.00010885588562814519, 0.0001249016058864072, 0.00011282821651548147, 0.00028430740348994732, 0.00025618611834943295, 0.00013316716649569571, 6.5513762820046395e-05, 0.00033797399373725057, 0.00029166473541408777, 0.00024709623539820313, 0.00012303385301493108, 0.00016384423361159861, 7.2023329266812652e-05, 0.00023012803285382688, 0.00019831211830023676, 0.00020094668434467167, 0.00015278466162271798, 0.00020595599198713899, 0.00023462125682272017, 0.00022674057981930673, 0.00014126111636869609, 0.00033667305251583457, 0.00054925482254475355, 0.00033273932058364153, 0.0001975501945707947, 0.00013792265963274986, 0.00025061037740670145, 5.9731522924266756e-05, 6.6895365307573229e-05, 0.00011458622611826286, 0.0001434126024832949, 0.00018055473628919572, 0.00013074219168629497, 0.00014978410035837442, 0.00010735547402873635, 0.00014985352754592896, 0.00014486683357972652, 0.00043433776590973139, 0.00013224786380305886, 0.00015651044668629766, 6.33794697932899e-05, 0.00026903420803137124, 7.2402224759571254e-05, 0.0001791050162864849, 0.00026262924075126648, 9.0864617959596217e-05, 5.2591905841836706e-05, 0.00024302795645780861, 0.00013076589675620198, 0.00016531528672203422, 0.00014732398267369717, 0.00020684032642748207, 0.00036433181958273053, 0.00015439384151250124, 0.00015850411728024483, 8.4238781710155308e-05, 0.00030594860436394811, 0.00022871166584081948, 0.0002516165841370821, 9.5582552603445947e-05, 0.0001380397443426773, 0.00014742257189936936, 0.00018002773867920041, 0.00017907518486026675, 0.00025577485212124884, 0.00016363043687306345, 0.00024668278638273478, 0.00023547840828541666, 0.0002250028628623113, 0.00010858232417376712, 8.3537182945292443e-05, 0.00013534301251638681, 0.00029237894341349602, 0.00025045211077667773, 0.00021278354688547552, 0.00016286605386994779, 0.00036047064349986613, 0.00021964589541312307, 7.3998773586936295e-05, 7.8472185123246163e-05, 0.00012171173875685781, 9.9071476142853498e-05, 0.00028787041082978249, 0.00034721981501206756, 0.00019686813175212592, 4.498987618717365e-05, 0.00012893936946056783, 0.00015145566430874169, 0.00012865803728345782, 0.00024673008010722697, 0.00017503478738944978, 0.00018359797832090408, 0.00012381936539895833, 7.3424067522864789e-05, } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ 7,61,-21,25,-56,28,24,-69,22,5,-127,119,-46,-77,34,-29, 
  /* [1][0][][] */ 48,27,-72,-39,60,34,53,-127,100,127,-6,-95,19,-122,-12,31, 
  /* [2][0][][] */ -127,-14,-21,-98,-16,-19,-5,59,-59,-54,74,76,-89,-20,-25,-57, 
  /* [3][0][][] */ -37,13,42,55,-33,5,5,127,38,19,-18,-49,-28,-25,-81,0, 
  /* [4][0][][] */ -1,-28,-26,127,-35,67,-9,7,78,5,-28,65,42,12,-113,23, 
  /* [5][0][][] */ -23,-76,27,-14,32,-27,1,-1,-10,127,12,-96,-6,44,-42,69, 
  /* [6][0][][] */ -6,23,6,1,63,127,-73,-18,-56,-11,91,7,66,21,-58,-22, 
  /* [7][0][][] */ -28,-28,115,-37,-38,-127,-76,-63,-68,-10,-39,-42,57,65,25,-52, 
  /* [8][0][][] */ 114,72,87,89,-20,92,-56,3,95,-23,19,-127,10,-113,-93,-102, 
  /* [9][0][][] */ 7,-56,52,46,59,-127,-49,-18,-28,-39,-22,-87,-54,-37,-100,-69, 
  /* [10][0][][] */ -25,-23,12,-34,-30,95,-21,29,2,15,127,16,-41,51,20,112, 
  /* [11][0][][] */ 37,18,-14,2,22,59,-127,-29,0,3,26,-8,-6,21,33,-7, 
  /* [12][0][][] */ 92,-3,58,-69,26,-8,-101,-13,5,-127,-73,104,-62,115,34,46, 
  /* [13][0][][] */ -4,-87,-54,-1,4,-127,23,-45,5,-14,-21,-47,43,-1,116,70, 
  /* [14][0][][] */ 40,-127,104,37,42,15,-30,62,-2,19,-26,-56,35,10,-106,0, 
  /* [15][0][][] */ 25,-86,-21,35,40,-20,122,-38,29,-127,56,-82,38,33,26,-36, 
  /* [16][0][][] */ -12,-71,42,-4,-19,-66,18,-82,51,-51,-1,29,18,81,127,44, 
  /* [17][0][][] */ -18,-22,32,127,61,20,15,-53,103,36,66,54,-16,-5,41,10, 
  /* [18][0][][] */ -13,-14,-9,-13,-127,-53,-52,-6,-65,10,-32,-90,31,7,8,-11, 
  /* [19][0][][] */ 29,17,12,-23,65,-17,-49,-79,127,-38,123,25,19,17,34,99, 
  /* [20][0][][] */ 41,-7,91,-37,-42,58,-73,106,20,27,75,88,-21,51,-71,127, 
  /* [21][0][][] */ -69,58,-59,-9,49,68,-89,-101,-66,-3,86,98,-127,-107,-13,80, 
  /* [22][0][][] */ 0,2,32,-26,-9,-75,37,30,-127,34,-1,-112,-3,-18,81,-39, 
  /* [23][0][][] */ 4,-13,-12,-1,-41,52,16,2,-24,-34,103,-30,127,1,-65,-22, 
  /* [24][0][][] */ 21,-74,5,-62,-4,7,-21,24,-25,-37,-2,-127,31,-40,30,30, 
  /* [25][0][][] */ 43,-11,30,9,24,6,44,-127,-54,36,97,-21,2,1,73,23, 
  /* [26][0][][] */ 56,-127,5,-48,13,26,-44,21,81,-2,46,2,-5,47,20,57, 
  /* [27][0][][] */ 50,19,33,-14,-54,-79,-24,-61,-70,-10,-127,49,-53,8,-1,77, 
  /* [28][0][][] */ -70,-10,-127,-57,26,3,-9,-33,45,-25,31,-50,-4,-14,31,84, 
  /* [29][0][][] */ 9,-49,57,127,-26,49,-46,-118,-11,-35,-89,15,27,-60,-5,-6, 
  /* [30][0][][] */ -12,-76,127,-4,61,62,-34,19,18,-16,-21,-8,-48,30,-112,41, 
  /* [31][0][][] */ 1,-44,23,-28,22,-41,12,-74,31,11,59,35,-24,108,99,127, 
  /* [32][0][][] */ -20,54,-31,26,-73,46,-65,-127,-63,-87,24,63,-23,15,58,47, 
  /* [33][0][][] */ -27,68,83,127,19,60,21,-2,-100,42,84,21,-33,-8,-34,97, 
  /* [34][0][][] */ 32,11,-20,-33,26,-64,-73,20,-18,127,-16,-44,-12,-10,36,-37, 
  /* [35][0][][] */ 44,-1,-91,25,-14,-43,-21,36,-62,-26,-127,18,48,-46,-45,19, 
  /* [36][0][][] */ 36,-24,-127,33,36,51,-30,-18,50,6,70,-20,9,55,2,45, 
  /* [37][0][][] */ -36,-5,127,30,-84,106,-18,-100,-94,20,-79,91,-40,-78,14,11, 
  /* [38][0][][] */ -127,6,2,39,25,35,41,30,23,17,88,-52,-8,15,-37,-62, 
  /* [39][0][][] */ -46,17,8,3,-18,-4,-127,49,7,14,31,36,-20,-76,-44,41, 
  /* [40][0][][] */ -18,108,-17,37,45,14,-21,-25,54,0,-71,127,-36,40,-49,13, 
  /* [41][0][][] */ 35,20,-19,30,-22,-17,127,83,-32,27,-15,-16,-2,2,57,-22, 
  /* [42][0][][] */ -48,-15,-33,-10,-15,28,-59,18,108,-105,21,127,-38,110,-49,27, 
  /* [43][0][][] */ -93,30,-1,-26,52,44,-37,-41,-7,39,-2,-31,-127,49,40,4, 
  /* [44][0][][] */ -18,-17,-9,9,33,-73,21,-105,79,38,-8,92,-109,96,127,47, 
  /* [45][0][][] */ -75,-62,67,-96,29,-49,23,-25,21,-84,8,-75,-30,87,-5,127, 
  /* [46][0][][] */ -8,-26,-79,127,-35,25,-54,-62,-86,127,-50,-53,-17,48,13,-9, 
  /* [47][0][][] */ -127,30,-116,110,16,49,48,-62,-26,70,-76,83,-96,-48,100,-48, 
  /* [48][0][][] */ -26,27,87,-92,73,82,-56,31,2,-79,14,-127,-66,51,6,52, 
  /* [49][0][][] */ 48,6,74,80,14,3,-58,-103,36,-22,31,14,-1,-14,-47,-127, 
  /* [50][0][][] */ 43,71,66,-32,127,34,-8,62,83,18,-10,-6,23,8,59,-10, 
  /* [51][0][][] */ -28,25,-18,-10,35,21,-51,-121,19,-127,47,12,8,-19,-1,11, 
  /* [52][0][][] */ 116,-64,18,127,89,2,-116,116,-63,113,-106,-18,94,101,-17,-38, 
  /* [53][0][][] */ 59,91,127,-23,-24,63,91,-20,-3,-1,-32,46,70,-96,-66,-16, 
  /* [54][0][][] */ 6,8,44,17,34,-69,19,-16,2,20,14,-71,2,127,-77,-15, 
  /* [55][0][][] */ -106,127,79,-36,-4,-80,-62,-6,-29,52,-19,44,-54,-13,121,20, 
  /* [56][0][][] */ 58,-12,0,-78,94,10,24,89,-25,-81,126,127,-7,-18,10,104, 
  /* [57][0][][] */ 6,-24,49,27,-19,45,28,127,13,34,38,-3,-24,40,-15,-42, 
  /* [58][0][][] */ 29,127,-49,-108,47,46,-44,25,123,30,17,115,26,-72,-21,30, 
  /* [59][0][][] */ 127,47,-14,-27,-12,24,77,-15,17,-22,69,-92,9,-64,-39,15, 
  /* [60][0][][] */ -11,-43,127,-28,-46,66,36,-35,-23,39,-95,22,0,-32,-3,54, 
  /* [61][0][][] */ 54,-32,-127,-19,-64,42,61,84,-20,0,29,3,11,73,60,-7, 
  /* [62][0][][] */ -62,-58,-80,-73,-69,-49,-9,-8,-109,-25,36,-127,-3,-38,54,-48, 
  /* [63][0][][] */ 77,-43,13,-1,91,86,-127,-44,0,48,53,16,3,-15,-7,-21, 
  /* [64][0][][] */ 12,-31,98,31,24,31,-121,-127,61,-100,3,-113,-56,0,34,-88, 
  /* [65][0][][] */ -127,23,8,-88,-24,6,37,-21,-88,33,22,-48,15,19,-3,-19, 
  /* [66][0][][] */ 51,-20,67,17,13,48,-21,-4,13,43,44,-127,-26,43,-49,-11, 
  /* [67][0][][] */ 76,-41,-58,90,50,38,-61,-53,127,-42,-67,-63,-28,61,-26,-34, 
  /* [68][0][][] */ 35,21,-127,5,14,-17,59,20,11,14,21,-2,8,-4,80,-34, 
  /* [69][0][][] */ -11,-28,-33,51,82,-118,-23,11,1,-104,108,23,127,75,16,4, 
  /* [70][0][][] */ -2,-52,-43,31,8,48,127,84,13,28,17,55,104,64,41,-38, 
  /* [71][0][][] */ 25,36,-74,-54,20,-24,-34,56,-32,-87,-27,56,-70,-119,28,127, 
  /* [72][0][][] */ 27,43,-10,6,-52,-110,-127,-126,-77,64,-79,62,-12,49,-28,35, 
  /* [73][0][][] */ -43,-127,-97,-38,-46,10,51,-9,52,12,-32,-30,1,-55,44,10, 
  /* [74][0][][] */ -1,-20,127,106,-5,-26,-108,117,31,-56,-4,-51,66,24,-21,-21, 
  /* [75][0][][] */ -37,43,-27,30,-62,29,85,127,1,91,-15,-12,-88,18,-8,-45, 
  /* [76][0][][] */ -50,-49,37,-23,-33,-127,-73,-35,-95,-40,-37,0,-91,-86,-1,3, 
  /* [77][0][][] */ -38,-48,-57,-74,-82,-118,33,-66,127,-43,-102,-10,-18,38,87,-86, 
  /* [78][0][][] */ 31,-96,40,55,22,59,45,26,46,65,-127,68,89,-8,-9,9, 
  /* [79][0][][] */ 22,-53,37,-49,123,-44,-3,-80,41,-72,-24,101,-69,-27,127,27, 
  /* [80][0][][] */ -99,-53,47,-120,-39,-51,-41,35,-24,6,-28,-22,-77,127,-6,97, 
  /* [81][0][][] */ -47,-119,116,74,-101,-29,-55,-53,58,32,-105,12,-82,67,-127,-9, 
  /* [82][0][][] */ -22,-25,9,-103,41,-84,-14,20,-74,-53,-24,-127,-10,-45,-23,42, 
  /* [83][0][][] */ -100,-31,-58,-42,-1,-67,-23,52,-127,25,23,-43,-23,-94,49,33, 
  /* [84][0][][] */ 126,1,72,15,-38,-83,-38,26,-21,-4,26,-34,-53,16,79,-127, 
  /* [85][0][][] */ 10,-10,-43,21,-2,-4,7,71,-25,-51,-34,-13,23,35,27,-127, 
  /* [86][0][][] */ -4,24,37,-47,-101,24,-44,-61,-127,-78,-7,15,-22,-56,-72,9, 
  /* [87][0][][] */ 122,-90,-68,45,-48,4,48,-54,-26,-30,-127,75,6,-46,-45,32, 
  /* [88][0][][] */ 7,12,0,127,20,42,32,-102,98,-7,-22,32,-1,-19,33,-11, 
  /* [89][0][][] */ -36,61,3,39,-38,11,27,-25,94,85,-23,127,-59,12,-29,-80, 
  /* [90][0][][] */ 42,48,-43,-50,-29,110,-77,47,127,-56,35,0,10,38,26,58, 
  /* [91][0][][] */ -10,-48,-36,-85,-50,-25,54,23,-126,7,81,-64,126,45,127,62, 
  /* [92][0][][] */ -28,-32,47,51,36,-34,-85,-101,15,-51,-127,-26,-32,-3,-61,-14, 
  /* [93][0][][] */ 8,33,42,-120,-65,5,7,-28,6,-52,2,-6,-40,43,-54,127, 
  /* [94][0][][] */ -44,23,45,-45,29,-63,-2,56,-66,54,13,-127,-52,-53,-75,-38, 
  /* [95][0][][] */ -12,49,-42,-127,-37,26,-58,36,31,-22,-7,-74,-17,-28,-34,53, 
};
const TfArray<96, float> quant13_scale = { 96, { 0.00083542760694399476, 0.00052871904335916042, 0.00039060894050635397, 0.00044818600872531533, 0.00040486289071850479, 0.0010201837867498398, 0.00091927585890516639, 0.00047784543130546808, 0.00023508386220782995, 0.0012127562658861279, 0.0010465842206031084, 0.00088665849762037396, 0.00044148389133624732, 0.00058792432537302375, 0.00025844221818260849, 0.000825771305244416, 0.00071160582592710853, 0.00072105950675904751, 0.00054823909886181355, 0.00073903443990275264, 0.00084189436165615916, 0.00081361603224650025, 0.00050688901683315635, 0.0012080881278961897, 0.0019708978943526745, 0.001193972653709352, 0.00070887181209400296, 0.00049490958917886019, 0.00089926837245002389, 0.00021433536312542856, 0.00024004146689549088, 0.00041117117507383227, 0.00051460921531543136, 0.00064788683084771037, 0.00046914382255636156, 0.00053747213678434491, 0.00038522499380633235, 0.00053772126557305455, 0.0005198274739086628, 0.001558539574034512, 0.0004745466576423496, 0.00056160840904340148, 0.00022742534929420799, 0.00096537882927805185, 0.0002598018036223948, 0.00064268475398421288, 0.0009423957671970129, 0.00032605064916424453, 0.00018871619249694049, 0.00087206024909391999, 0.00046922892215661705, 0.00059320288710296154, 0.00052864447934553027, 0.00074220774695277214, 0.0013073363807052374, 0.00055401335703209043, 0.00056876230519264936, 0.00030227506067603827, 0.0010978392092511058, 0.00082068890333175659, 0.00090287887724116445, 0.00034298005630262196, 0.0004953297320753336, 0.00052899826550856233, 0.00064599578035995364, 0.00064257771009579301, 0.00091780012007802725, 0.00058715714840218425, 0.00088517495896667242, 0.00084497011266648769, 0.00080738059477880597, 0.0003896272974088788, 0.00029975752113386989, 0.00048565302859060466, 0.0010491469874978065, 0.00089870044030249119, 0.00076353386975824833, 0.00058441428700461984, 0.0012934813275933266, 0.00078815809683874249, 0.00026553071802482009, 0.00028158273198641837, 0.00043673976324498653, 0.00035549941821955144, 0.0010329689830541611, 0.0012459332356229424, 0.0007064243545755744, 0.0001614377397345379, 0.00046267473953776062, 0.00054347026161849499, 0.00046166521497070789, 0.00088534463429823518, 0.00062807952053844929, 0.00065880693728104234, 0.00044430256821215153, 0.00026346850791014731, } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -3133, 6632, -15305, 30387, 24235, 14430, -49452, -16942, 15501, -16060, 28896, 38815, -22424, 934, 11739, -26017, };
const TfArray<16, float> quant14_scale = { 16, { 0.00034594422322697937, 0.00025118808844126761, 0.00025855671265162528, 0.0001527563581475988, 0.00021990711684338748, 0.00027696153847500682, 0.00020825282263103873, 0.00042797543574124575, 0.00020102947019040585, 0.0002141268050763756, 0.00039518417906947434, 0.0004657947865780443, 0.0002103086153510958, 0.00031219155061990023, 0.00053317786660045385, 0.00036781036760658026, } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -12,10,-20,-5,32,58,-38,4,52,20,1,-20,-18,8,100,1,18,-37,0,-38,77,-33,9,23,-44,-42,-69,-49,38,-27,50,65,127,-22,13,58,-10,-24,-38,51,-41,-35,-4,-45,-1,-49,-62,30,-7,38,73,-1,-58,-11,-7,-53,93,-10,-17,28,-44,30,41,-32,-36,44,84,-11,28,23,30,34,-73,-41,-23,0,-31,-91,-17,-15,69,-42,-104,-33,29,14,21,-9,-11,11,-7,-66,68,27,-25,108, 
  /* [1][0][][] */ 112,-52,27,-2,-18,24,57,-28,9,-91,-26,54,69,-42,0,-55,-71,-22,-3,79,-34,-57,-66,-21,104,-9,-66,37,18,35,-74,-22,-33,102,-18,20,-5,-59,42,-1,-21,-66,4,-23,20,14,83,-25,50,12,-20,-1,94,-17,19,74,30,5,25,-127,-9,-95,47,-24,-53,-7,30,28,-18,19,-35,-85,-111,25,-41,13,17,48,19,-61,36,-11,-69,17,-40,13,-64,93,-75,96,26,-57,-15,-23,54,-38, 
  /* [2][0][][] */ 25,-61,14,-21,16,22,-43,13,79,5,39,99,19,21,-5,67,-12,0,-23,-18,-6,-69,53,24,11,-12,9,14,-7,27,41,-29,37,-60,-20,13,-22,127,-7,-10,9,-12,-6,42,-77,-31,-89,24,43,-11,-4,-1,19,8,-23,-81,-38,47,32,49,-20,41,96,91,-9,-65,32,-62,-17,-15,-30,-28,36,43,-12,38,14,42,-78,17,-3,75,11,-19,-41,-10,-14,13,36,-15,-55,-71,-65,-23,-16,54, 
  /* [3][0][][] */ -22,10,-55,-18,50,-31,16,32,0,6,-25,-8,17,8,47,-17,6,-30,16,60,58,17,-30,-6,-48,-14,-17,35,50,-59,52,14,11,-18,-42,66,-41,19,-26,28,-21,-84,11,-16,-26,-69,-6,12,-93,44,48,45,-127,3,-105,-55,32,-22,-27,77,15,2,-12,3,-8,-43,-23,26,65,11,50,16,-34,6,16,-42,-54,-47,-32,-35,39,-31,-10,45,40,58,33,73,33,22,-24,-9,-20,-3,-97,-14, 
  /* [4][0][][] */ 17,-49,-41,-127,48,40,-64,25,-48,-29,-11,26,14,44,28,-97,107,-65,60,14,-50,52,-6,117,-105,-30,24,92,24,-10,1,-49,-56,-59,-25,106,52,-57,-26,-22,8,-70,-88,-42,11,-23,15,65,-36,74,49,29,-105,-45,-34,-14,14,-38,23,45,11,9,34,12,34,-111,24,-3,8,-18,-2,71,12,13,-37,12,-49,79,17,9,5,-70,39,-34,32,-66,-16,9,73,-15,-26,20,-21,28,12,-13, 
  /* [5][0][][] */ -6,59,-37,-24,29,-79,-12,116,68,-16,-50,-60,-50,46,53,-5,-41,0,29,-14,-1,29,-28,-76,-4,-16,17,40,84,-1,20,52,-66,37,40,-9,-69,-75,-92,-17,-75,-15,0,0,97,-17,28,-1,-2,23,0,7,-51,-48,-36,6,0,-52,-60,23,-78,-11,-17,-67,2,41,-7,16,22,44,98,0,38,-67,-6,11,-5,-15,-9,121,24,-82,54,39,98,-9,-7,-29,5,-71,32,-127,11,-50,-37,-105, 
  /* [6][0][][] */ 0,-26,-12,-34,20,53,-35,26,-11,5,-34,-69,48,-5,-37,83,41,-45,-23,39,78,9,10,48,106,-31,-18,74,-10,-53,65,42,55,9,-44,32,10,31,41,96,17,-38,-61,27,-28,11,-4,-67,-18,38,86,10,-21,-59,-2,-38,31,69,-14,64,2,12,65,-18,38,66,46,15,-56,21,60,-39,37,24,58,12,-5,60,-20,31,54,55,26,-35,38,119,85,-2,127,11,-56,42,-92,37,17,61, 
  /* [7][0][][] */ 18,-13,21,-6,-6,13,-23,-20,7,-17,-11,-28,9,-2,19,26,10,-23,-14,14,16,-14,-32,-25,1,11,-5,-57,-4,-16,36,2,-13,6,-17,4,18,30,-21,17,30,-31,-21,2,33,6,-23,20,-10,7,-6,2,3,0,-22,-40,-1,8,17,23,9,10,-28,-1,13,42,24,-12,-10,18,34,-6,-3,1,16,0,13,31,-8,-40,30,24,24,-20,-39,127,10,-8,3,-16,-1,17,-30,9,-19,30, 
  /* [8][0][][] */ -49,74,-35,-10,65,-28,45,43,37,47,-28,-86,-12,67,81,-36,-42,57,-40,6,37,94,-90,-79,-64,-60,-47,-10,67,-63,7,-8,-7,-31,40,84,-22,7,-49,-1,-127,63,8,-94,-30,-14,93,9,-52,45,-34,40,-82,73,16,1,20,-88,-64,-24,43,-54,-23,12,-46,55,28,-38,40,19,67,124,-48,-23,84,3,-7,-76,-16,14,26,-51,79,18,33,19,-4,-53,-34,40,-34,3,115,-33,-18,-12, 
  /* [9][0][][] */ -36,-56,60,0,-19,-3,18,5,-3,-71,-67,-39,-49,12,27,80,-60,3,-10,-73,-40,2,-22,-50,35,40,-54,-85,3,-59,16,13,-23,31,-17,-8,21,38,7,53,35,-23,-29,-36,12,16,39,-50,-45,12,-10,36,-44,14,-61,-6,-27,21,20,12,-21,20,29,16,-18,127,32,51,-11,2,16,30,37,-42,-15,4,51,17,-41,21,32,83,-47,-41,-51,103,2,17,-3,-3,12,19,-9,20,-24,0, 
  /* [10][0][][] */ 18,10,-35,-24,77,-87,-10,-17,-35,13,-9,-2,-48,0,21,-127,6,-13,37,52,-6,7,-32,-27,-80,1,-25,29,18,13,10,1,-24,-15,17,21,86,2,-65,-9,-40,41,-3,-14,-33,-50,-6,-11,-19,-23,-11,-7,-29,-13,-1,-13,12,-1,-68,8,-23,19,-46,11,8,36,18,-29,20,17,64,58,-25,-64,-72,10,-8,-3,4,6,46,-10,-39,-36,88,-27,92,-8,9,-42,-21,15,43,7,2,-59, 
  /* [11][0][][] */ 51,81,-69,20,41,-18,76,-12,33,-3,-74,-47,-17,-19,29,-11,-18,2,-100,2,14,53,14,-19,-75,-66,-11,-8,14,32,-32,-36,0,67,24,-3,-26,-17,-32,3,-15,17,79,-72,15,-18,83,-22,-71,28,30,-60,51,21,-15,56,7,-12,-14,1,-4,-10,-47,-23,-80,35,-24,-34,31,-15,56,49,-78,-60,25,32,-31,-48,-59,4,18,-75,127,56,62,-25,-24,0,8,49,-19,-21,26,6,-15,6, 
  /* [12][0][][] */ -32,-35,19,-9,-5,83,33,17,127,-14,-58,-23,11,18,-27,-105,80,35,36,92,65,19,-25,47,-8,18,26,-39,-88,-43,68,-44,9,-68,2,91,-20,-27,46,-18,-28,-50,-44,-7,21,9,-49,-32,30,19,7,-6,-74,-18,-5,-86,62,-21,27,30,32,-48,42,-21,-29,94,3,-51,-64,12,27,-32,42,-21,-71,21,-10,10,-48,-33,-24,-22,40,57,19,68,-19,-53,-4,19,-63,47,0,9,-58,29, 
  /* [13][0][][] */ 46,3,-47,-1,53,20,-16,39,4,16,16,-28,-20,9,17,-11,29,-92,-14,-20,28,4,11,20,1,-2,-22,7,15,-67,26,24,10,-46,-15,72,2,38,-12,16,8,-30,10,31,4,19,-41,-127,0,15,49,-3,-51,-39,1,-28,15,28,-9,33,16,12,-17,-5,-5,-18,-13,-56,5,5,20,-1,-5,26,28,42,-28,38,-5,21,68,-16,-7,-14,68,51,62,51,38,-31,11,32,-10,48,-16,47, 
  /* [14][0][][] */ -103,-60,37,18,13,-35,6,-12,-70,2,5,54,57,-7,-127,24,60,-11,-59,-30,-66,-25,62,79,-77,-4,31,18,1,-48,-52,2,6,-26,6,-75,66,14,11,5,5,7,4,-39,46,114,55,100,-60,34,21,25,-24,9,30,4,2,19,58,73,30,45,26,39,22,10,-65,25,-14,34,-45,-40,-4,20,-13,3,-23,31,124,3,2,-15,-21,-3,-11,10,24,39,3,38,46,24,-35,31,59,-16, 
  /* [15][0][][] */ 75,4,32,9,-10,1,63,-46,-28,57,-26,-7,-70,-16,-33,47,-33,15,14,18,-49,15,-34,-3,14,55,44,7,-5,43,-77,-96,2,24,59,13,25,-60,-33,-39,6,42,35,38,13,30,22,-20,102,-9,-66,16,55,-79,61,-31,0,-48,43,2,-127,20,-21,36,54,3,-18,19,-13,26,6,13,16,-28,25,-11,-8,-48,77,-27,-25,-14,46,52,-1,-25,-17,-19,-40,23,87,64,-38,51,46,-2, 
};
const TfArray<16, float> quant15_scale = { 16, { 0.014702629297971725, 0.010675493627786636, 0.010988660156726837, 0.0064921448938548565, 0.0093460520729422569, 0.011770864948630333, 0.0088507449254393578, 0.018188955262303352, 0.008543752133846283, 0.0091003887355327606, 0.016795327886939049, 0.019796278327703476, 0.0089381160214543343, 0.013268141075968742, 0.022660059854388237, 0.015631940215826035, } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 13340, -9999, 2888, 59909, -1251, -6213, -10074, 4886, -2506, 2085, 1852, -1464, -1468, -9761, 5106, -2888, -3609, 11130, 29885, 2337, -2773, -3410, 1583, -271, 14718, 3628, -311, -2427, -8165, -9208, 7406, -13702, -2256, -287, -2255, 11942, 211, -4799, 16290, 241, 29, 4949, -12435, -7539, -11086, 57080, -4451, 19813, 39531, -17415, 269, 6031, 2949, 191, -4555, 67, -21512, 700, 162, -3297, -266, -78, -17614, -1297, 2666, 16823, 25103, 39296, -9546, -1230, -9170, -2835, 36911, 12752, -1483, -498, 25932, 31622, -2282, -12448, -1898, -6951, -788, -4034, 48, 1030, 2779, -1439, -957, -455, -1838, -757, -1266, -1048, 785, 53837, };
const TfArray<96, float> quant16_scale = { 96, { 0.00016442705236840993, 0.0001104290786315687, 0.00023176221293397248, 3.5083136026514694e-05, 0.00013665587175637484, 0.00014851566811557859, 0.00035109755117446184, 7.4534102168399841e-05, 0.0001851852866820991, 0.00045878221862949431, 0.00020604173187166452, 0.00046167764230631292, 0.0001166925867437385, 0.00037845881888642907, 0.00017106645100284368, 0.00027228606631979346, 9.867851622402668e-05, 0.00023532683553639799, 5.2040530135855079e-05, 0.00021796082728542387, 5.5312153563136235e-05, 0.00015886758046690375, 0.00011597768752835691, 0.00037411553785204887, 0.00024506135378032923, 0.00019007851369678974, 0.00014670545351691544, 0.00017991670756600797, 9.5226198027376086e-05, 9.2756490630563349e-05, 0.00011592769442358986, 0.00014882073446642607, 0.00011214808910153806, 0.00015141640324145555, 0.00025129385176114738, 0.00020608083286788315, 0.00035671642399393022, 0.00013131277228239924, 6.6557229729369283e-05, 0.00014274928253144026, 0.00022736549726687372, 0.00035024562384933233, 0.00032865174580365419, 0.00014578695117961615, 0.00017718962044455111, 4.1426988900639117e-05, 0.00020841139485128224, 0.00018446492322254926, 6.7754815972875804e-05, 0.00013171051978133619, 0.0002603679895401001, 0.00014750543050467968, 0.00026363646611571312, 0.00027109924121759832, 0.00025019512395374477, 0.00042356114136055112, 0.00017224361363332719, 0.00024966287310235202, 0.00011351875582477078, 8.6529158579651266e-05, 0.00030043112928979099, 0.00013286064495332539, 0.00022744701709598303, 0.00012819773110095412, 0.00016702193534001708, 0.00018712774908635765, 7.8399942140094936e-05, 4.6245015255408362e-05, 0.00035753528936766088, 0.00020031791063956916, 0.00017192860832437873, 8.1398589827585965e-05, 0.00016387595678679645, 0.00011995656677754596, 0.00015683588571846485, 0.00019290370983071625, 0.00050347083015367389, 5.6668875913601369e-05, 0.00027672501164488494, 0.00014959927648305893, 0.00018373095372226089, 0.00027722460799850523, 0.00024264010426122695, 0.00012283286196179688, 0.00014311469567473978, 0.00014109366748016328, 0.00013036065502092242, 0.00016789590881671757, 0.00016656015941407531, 0.00011484373681014404, 0.00019880743639077991, 0.00012388109462335706, 0.00015108904335647821, 0.00044752942631021142, 0.001262826262973249, 7.7421042078640312e-05, } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -21,9,-21,104,-31,24,-66,-54,22,-8,105,3,-2,-6,3,66,2,18,-34,-3,81,-8,38,-38,-1,7,42,42,36,17,20,50,4,31,2,-17,8,46,-62,-31,21,0,31,20,-79,-61,30,-9,-18,-22,-12,-5,54,6,-11,7,2,-42,27,-31,28,-4,127,22,-16,-7,24,-43,61,34,-23,3,61,-45,82,9,4,-123,20,66,8,19,127,-11,48,18,-39,-26,36,-11,-10,89,-9,16,-11,17, -48,19,-11,12,45,-7,-5,-127,32,9,-127,1,-13,-12,5,104,18,-28,-11,-33,71,-102,127,25,-59,-32,-104,-17,38,40,-51,16,127,15,-7,-4,-27,127,-79,-127,4,-22,-26,15,54,-127,127,-47,-77,60,45,8,43,-61,31,61,48,52,-93,93,127,24,14,-22,46,-41,-91,10,32,-32,-28,67,-44,-58,99,-7,-39,-58,-37,66,-62,61,1,7,-9,38,50,-47,-32,42,-2,78,-127,-28,23,-127, 0,9,-27,-64,15,17,47,17,5,0,13,56,1,-9,-4,34,-18,24,-31,16,28,25,25,-33,0,-48,11,15,10,8,49,-71,54,24,11,-29,12,10,-53,-29,9,-7,-12,1,38,-32,30,-1,7,-5,0,-7,17,6,1,8,1,50,14,-8,11,-14,21,-15,-25,-18,47,-47,-114,-4,53,-5,-127,-42,-4,16,3,-15,8,10,-19,8,-24,3,-47,18,28,38,-31,-17,33,-1,17,4,-3,-50, 
  /* [0][1][][] */ -41,71,-20,38,-97,-7,-13,-44,33,92,-53,-18,-22,-21,-1,75,127,-21,-67,-15,73,-127,-32,10,-35,-56,-127,-11,43,42,-53,33,-124,-81,-50,2,64,-2,-23,37,-20,77,8,-1,41,-42,-12,-32,127,56,-2,26,45,10,-45,-14,38,9,-127,127,-37,-92,22,127,-62,-36,-76,118,-45,127,-31,65,-20,-60,42,3,-48,-72,127,61,127,37,18,2,127,16,-105,50,-35,-43,-102,44,88,102,34,-58, 127,127,127,127,-46,-127,127,18,127,-127,24,-127,-98,127,127,127,-17,-127,-40,-127,127,24,-75,127,127,127,-59,-127,127,127,-127,127,-18,-127,-101,127,-127,-43,127,101,-127,-127,127,127,127,-107,-99,127,-14,127,-127,-127,-127,127,127,-127,127,-127,-31,29,-107,-31,-94,-69,127,127,-64,127,127,-104,-126,127,-34,127,-127,-127,-127,127,-78,127,-40,127,58,127,-37,-127,-25,-114,-127,-127,-20,-127,-22,-127,-127,118, -26,68,-38,4,127,78,-19,43,8,26,-17,-10,-19,-26,-7,-15,-106,-23,-127,43,35,81,-18,-103,-35,-52,121,64,9,43,66,16,126,-45,127,-4,58,9,-87,6,33,17,-19,-6,-15,-49,-5,-40,83,20,-11,42,-1,-4,-72,-17,43,29,121,-108,-1,127,5,-31,-111,-29,-74,105,15,-13,127,33,-13,-59,10,47,-33,-12,-34,-11,-55,-8,28,27,-93,26,127,-44,37,-26,127,-2,-96,40,45,19, 
  /* [0][2][][] */ -9,-42,-23,-53,-10,25,42,34,2,5,-27,61,28,-36,-1,-12,41,11,-4,23,-15,32,-22,-29,2,-29,12,-4,3,-2,48,-62,-51,66,-32,-28,30,-34,-65,19,17,7,-32,0,19,-68,-11,-5,-6,21,16,-8,10,-3,-30,10,15,42,-49,26,-8,-15,22,17,-12,-12,26,-56,-61,13,-39,-3,-85,-47,2,14,7,-19,62,4,24,21,-35,19,10,28,-29,10,12,24,20,0,24,39,2,-33, -29,-6,-26,31,-35,80,-29,63,6,-9,57,-7,127,-11,-10,-27,4,-37,-96,30,-35,80,-50,-100,-44,-49,100,73,26,36,51,8,-123,65,-8,-25,-24,-26,-85,-7,47,-15,-14,20,-19,-48,-15,-49,-54,34,64,29,-9,-85,27,55,30,24,71,-82,13,-68,1,-1,11,-26,-127,-62,-12,-22,-54,23,37,-43,-27,-7,-45,18,-47,-5,47,12,11,8,7,48,-99,127,29,122,-34,-18,111,-22,47,83, -14,-31,-26,36,17,73,-47,10,-1,-8,-1,22,18,-48,-2,-17,-42,2,-12,31,-40,10,-30,4,-2,12,-4,55,1,-11,35,36,15,40,29,-26,0,-26,-24,6,10,-15,22,-3,-73,-36,-11,6,3,-6,8,2,-4,3,-20,2,12,-54,14,-43,-32,47,29,-30,-15,-4,24,-54,48,7,56,-29,34,-52,-17,25,6,2,5,13,-33,21,75,-10,-22,48,42,-6,126,16,-1,-13,19,-17,10,-51, 
};
const TfArray<96, float> quant17_scale = { 96, { 0.0069881496019661427, 0.0046932357363402843, 0.0098498938605189323, 0.0014910332392901182, 0.005807874258607626, 0.0063119158148765564, 0.014921645633876324, 0.0031676993239670992, 0.0078703742474317551, 0.019498243927955627, 0.0087567735463380814, 0.019621299579739571, 0.004959434736520052, 0.016084499657154083, 0.0072703240439295769, 0.011572157964110374, 0.0041938368231058121, 0.010001390241086483, 0.0022117225453257561, 0.009263334795832634, 0.0023507664445787668, 0.0067518721334636211, 0.0049290517345070839, 0.015899909660220146, 0.010415107943117619, 0.0080783367156982422, 0.0062349815852940083, 0.007646460086107254, 0.0040471134707331657, 0.0039421506226062775, 0.0049269269220530987, 0.0063248812220990658, 0.0047662938013672829, 0.0064351973123848438, 0.010679988190531731, 0.0087584350258111954, 0.015160447917878628, 0.0055807926692068577, 0.0028286823071539402, 0.0060668443329632282, 0.0096630332991480827, 0.014885438606142998, 0.013967699371278286, 0.0061959451995790005, 0.007530558854341507, 0.0017606470501050353, 0.0088574839755892754, 0.0078397588804364204, 0.0028795795515179634, 0.0055976971052587032, 0.011065639555454254, 0.0062689804472029209, 0.011204549111425877, 0.0115217175334692, 0.010633292607963085, 0.018001347780227661, 0.0073203532956540585, 0.01061067171394825, 0.0048245470970869064, 0.0036774892359972, 0.012768322601914406, 0.0056465775705873966, 0.0096664978191256523, 0.0054484033025801182, 0.0070984321646392345, 0.0079529294744133949, 0.0033319974318146706, 0.0019654131028801203, 0.015195249579846859, 0.0085135111585259438, 0.0073069659993052483, 0.00345944007858634, 0.006964727770537138, 0.0050981538370251656, 0.0066655250266194344, 0.0081984074786305428, 0.021397508680820465, 0.0024084271863102913, 0.011760812252759933, 0.0063579692505300045, 0.0078085651621222496, 0.011782045476138592, 0.010312204249203205, 0.0052203964442014694, 0.0060823746025562286, 0.0059964810498058796, 0.0055403276346623898, 0.0071355761028826237, 0.0070788068696856499, 0.0048808585852384567, 0.0084493160247802734, 0.0052649467252194881, 0.0064212842844426632, 0.019020000472664833, 0.053670115768909454, 0.0032903943210840225, } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 20668, 304, 5648, -1148, 8629, 2580, 14282, 16354, -3805, 34169, 9071, 4187, 9299, 48910, -823, -6721, 11352, 8629, 1020, -284, -1762, 20170, 5644, 4433, 15048, 13398, 8317, 6906, 220, -260, 8629, 13638, 19062, 3396, 10407, -265, 11838, 9177, 1631, 9445, 1891, 13533, 14940, 4777, 5589, 17366, 10932, 10270, 6852, 5052, 1055, -1862, 17448, 9809, 9674, 15206, 122, 10890, 2825, 4222, 13991, 8157, 4072, 10434, 4252, 8596, 6835, -1226, 37407, 6923, 8097, -1153, -2424, 8117, 2400, 4554, 65829, 19277, 10414, -3735, 9832, -7369, -2640, 1784, 8132, 4425, 8638, 7843, 10718, 5333, 6592, 3302, 16753, 28025, -10233, 27492, };
const TfArray<96, float> quant18_scale = { 96, { 0.00012620640336535871, 0.00025135857868008316, 0.00020400287758093327, 0.00062694086227566004, 0.00017704609490465373, 0.00027285539545118809, 0.00019788576173596084, 0.00021549500524997711, 0.0001639691909076646, 5.631249223370105e-05, 0.00019130881992168725, 0.00027358270017430186, 0.00029029377037659287, 9.5303956186398864e-05, 0.00023875069746281952, 0.00015047185297589749, 0.00018699999782256782, 0.00024052491062320769, 0.00027936208061873913, 0.00033786546555347741, 0.00027119115111418068, 0.00011919349344680086, 0.00027055473765358329, 0.00015185406664386392, 0.00012125875946367159, 0.00017472036415711045, 0.00017473225307185203, 0.00012944429181516171, 0.00038083668914623559, 0.00022925772645976394, 0.0001673642109381035, 0.00013685274461749941, 0.00010538928472669795, 0.00036075938260182738, 0.00015152608102653176, 0.00043772126082330942, 0.00017143355216830969, 0.00026914177578873932, 0.00033342384267598391, 0.00011823408567579463, 0.00031903307535685599, 0.00013528906856663525, 0.00014518591342493892, 0.00014920633111614734, 0.00021148526866454631, 0.000169492865097709, 0.00022917223395779729, 0.00014139560516923666, 0.0002150377695215866, 0.00020140086417086422, 0.00028308090986683965, 0.00041748268995434046, 0.00014832300075795501, 0.00015256795450113714, 0.00023129994224291295, 0.00011484948481665924, 0.00037341692950576544, 0.00016125451656989753, 0.0003011540393345058, 0.00040569156408309937, 0.00011052460467908531, 0.00018597693997435272, 0.00030166411306709051, 0.00027120954473502934, 0.00025833724066615105, 0.00014046356955077499, 0.00027204412617720664, 0.00035823113285005093, 7.4221679824404418e-05, 0.0001791974063962698, 0.00023209990467876196, 0.0004304773174226284, 0.00019456072186585516, 0.00017388247943017632, 0.00015914857794996351, 0.00024927756749093533, 3.9087502955226228e-05, 0.00023664938635192811, 0.00014088388707023114, 0.00030622689519077539, 0.00012046859774272889, 0.00028504827059805393, 0.00021149883104953915, 0.00023457148927263916, 0.00017080649558920413, 0.00025482481578364968, 0.00019246249576099217, 0.0001667206670390442, 0.0001563145051477477, 0.00030544743640348315, 0.00020962822600267828, 0.00047706378973089159, 0.0001125223352573812, 0.00010110824950970709, 0.00027922456501983106, 0.00012135934230173007, } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ -4,-77,103,85,5,-57,78,10,125,82,-85,-117,-27,127,-22,-83, 
  /* [1][0][][] */ -2,34,-75,15,-2,-31,25,-27,66,25,-95,86,23,-25,127,-80, 
  /* [2][0][][] */ -15,-31,7,6,-5,57,-81,5,0,-127,15,109,-68,-1,32,-56, 
  /* [3][0][][] */ 127,64,-20,39,-65,-4,-14,7,21,10,67,-30,39,47,-44,-75, 
  /* [4][0][][] */ 14,34,-79,50,-106,49,-78,36,-90,-78,-88,22,-78,-127,100,32, 
  /* [5][0][][] */ 50,-16,21,-15,23,-52,-39,14,1,2,-127,18,4,-9,-58,-10, 
  /* [6][0][][] */ -46,-75,-42,31,28,22,-88,53,-127,-94,-70,-21,57,-2,-39,34, 
  /* [7][0][][] */ 28,30,-75,127,125,-87,-24,57,-43,-20,48,11,20,63,-62,-78, 
  /* [8][0][][] */ 52,-79,-19,-49,80,-2,-110,-81,-39,-16,-103,15,-127,-14,59,85, 
  /* [9][0][][] */ 78,-49,39,103,69,-82,-24,-92,121,-127,-91,51,-23,119,-30,4, 
  /* [10][0][][] */ 30,-52,-26,21,-53,47,53,37,26,8,-72,67,127,-46,-58,31, 
  /* [11][0][][] */ 27,8,-127,9,12,36,-21,10,-18,-3,-12,-23,-2,6,-88,-4, 
  /* [12][0][][] */ 90,-72,-5,-20,-24,-110,-57,26,0,37,-127,-49,-1,-32,-24,44, 
  /* [13][0][][] */ 79,-99,42,20,113,-3,-15,-127,61,-15,-56,46,36,5,97,-75, 
  /* [14][0][][] */ -60,8,-86,10,15,-127,63,-35,17,-10,-46,-44,22,75,-6,65, 
  /* [15][0][][] */ 99,-14,127,64,47,-60,-45,-11,11,-50,-100,48,-74,-20,-14,-26, 
  /* [16][0][][] */ -120,70,-65,13,59,100,55,-29,-16,-18,125,98,127,-32,16,-24, 
  /* [17][0][][] */ -5,-1,-31,-9,-27,1,9,49,8,104,-12,60,13,96,127,15, 
  /* [18][0][][] */ -7,89,-68,40,20,19,18,-105,26,55,-45,127,-21,-18,11,-24, 
  /* [19][0][][] */ 3,-2,7,-27,-14,60,41,87,-4,-16,-4,12,-127,-36,-50,29, 
  /* [20][0][][] */ 105,-48,45,-84,-94,63,29,-102,-16,37,-127,-10,40,-6,65,32, 
  /* [21][0][][] */ 63,17,127,70,49,86,-18,-10,-49,12,17,-9,-10,89,-45,-6, 
  /* [22][0][][] */ 24,33,-59,50,55,41,127,93,24,-49,-53,81,-26,59,91,3, 
  /* [23][0][][] */ 2,-16,-127,28,-53,-105,27,56,45,-52,-43,34,-100,6,-21,61, 
  /* [24][0][][] */ 50,-37,-2,-27,101,1,-84,12,68,6,75,76,-7,67,127,38, 
  /* [25][0][][] */ -122,-102,-26,-55,10,-24,-8,-56,-127,-71,0,-2,-22,25,37,-12, 
  /* [26][0][][] */ -14,-30,127,-20,28,18,-3,78,-121,-35,-52,-2,114,-114,-48,25, 
  /* [27][0][][] */ -95,61,-108,-7,108,-66,-44,25,41,-103,47,127,-35,4,14,67, 
  /* [28][0][][] */ -13,-13,20,28,-6,19,19,88,12,10,-44,27,-127,-14,-35,47, 
  /* [29][0][][] */ -1,120,36,-38,89,28,39,-24,-127,114,-41,-47,75,4,-42,-89, 
  /* [30][0][][] */ 3,-39,-103,-48,39,-15,39,23,-13,11,20,-127,-46,-34,80,-45, 
  /* [31][0][][] */ 101,-57,-124,43,127,-10,1,47,-70,38,-118,-70,21,25,-97,-37, 
  /* [32][0][][] */ -33,75,-42,48,12,75,47,40,-21,-60,127,25,-9,1,-39,-3, 
  /* [33][0][][] */ 41,39,127,-44,-57,19,15,6,-7,-13,-49,75,-40,19,-78,53, 
  /* [34][0][][] */ -24,-54,-127,-52,-9,16,-34,-22,-9,-113,-65,-8,-28,-52,23,86, 
  /* [35][0][][] */ -8,7,37,41,22,1,-61,-26,-49,27,-3,-16,-24,127,-27,-25, 
  /* [36][0][][] */ -37,10,23,-7,5,-11,36,47,-6,49,127,-44,0,65,15,-8, 
  /* [37][0][][] */ -15,-10,127,-27,-37,-68,22,-6,-49,-16,13,15,19,-29,48,25, 
  /* [38][0][][] */ 26,-27,64,7,71,0,-127,9,-48,-95,66,-3,65,-22,8,-9, 
  /* [39][0][][] */ -23,-47,-48,-12,-126,-127,46,58,-9,89,-91,-19,30,-9,8,94, 
  /* [40][0][][] */ 39,-69,39,-84,-65,106,0,33,-22,-26,89,-6,127,9,-48,-59, 
  /* [41][0][][] */ 6,-4,-127,-38,-31,-41,-29,-23,-43,-56,15,-40,-64,-42,-5,57, 
  /* [42][0][][] */ 86,59,46,46,-51,-49,-36,-16,-30,-27,42,-66,75,127,26,-20, 
  /* [43][0][][] */ 62,127,-58,95,18,74,-20,-52,8,59,11,63,-2,-14,-20,101, 
  /* [44][0][][] */ -8,-37,-127,-6,32,66,-73,21,-17,-49,9,0,8,-12,-51,4, 
  /* [45][0][][] */ -107,11,-5,-127,-27,-66,6,-36,-11,-93,34,71,-4,-93,85,24, 
  /* [46][0][][] */ 13,-3,75,-30,-1,29,-15,53,35,39,-13,-8,1,127,7,35, 
  /* [47][0][][] */ 60,-81,2,-43,-83,40,-36,46,-30,-73,12,23,-11,-127,73,19, 
  /* [48][0][][] */ 21,13,16,-127,-7,-31,-65,-8,18,-59,-11,2,-33,61,4,90, 
  /* [49][0][][] */ -8,10,11,94,127,7,-11,48,-86,-13,37,71,-11,-10,45,14, 
  /* [50][0][][] */ 50,17,42,78,-42,64,26,-53,-9,-16,127,52,117,-61,-23,-38, 
  /* [51][0][][] */ 19,81,24,47,-4,-16,-25,89,74,38,34,127,10,60,7,-45, 
  /* [52][0][][] */ -49,111,27,10,18,-51,2,-48,-36,9,22,38,16,91,-127,-5, 
  /* [53][0][][] */ -86,-20,1,-127,-26,15,29,29,-58,16,74,-1,36,-34,44,81, 
  /* [54][0][][] */ -33,-27,63,-44,37,32,-53,29,-6,-48,45,18,-43,127,-12,-24, 
  /* [55][0][][] */ 6,62,-63,49,21,-56,-16,-127,-30,-63,-55,32,0,-52,-49,23, 
  /* [56][0][][] */ 12,63,10,59,13,-22,33,115,4,-62,55,-27,127,-35,-64,13, 
  /* [57][0][][] */ 15,-10,24,-24,-56,-78,32,-18,-19,24,-127,16,-44,0,35,23, 
  /* [58][0][][] */ 45,65,32,54,-127,16,8,13,31,-2,90,25,51,-21,4,-29, 
  /* [59][0][][] */ 44,-50,-1,-11,-26,-3,-12,-10,-13,-3,-127,-5,-26,-14,-31,36, 
  /* [60][0][][] */ -127,53,-12,-28,-48,5,39,80,73,-18,103,109,48,23,120,6, 
  /* [61][0][][] */ -97,21,1,-33,54,-21,27,-23,6,-73,89,-28,127,-6,-21,-5, 
  /* [62][0][][] */ -33,-40,-53,80,4,127,15,69,35,-1,54,-39,-5,-8,-59,-13, 
  /* [63][0][][] */ -38,-13,127,-75,10,-79,6,6,-10,4,11,-38,11,8,53,4, 
  /* [64][0][][] */ 32,59,-78,-45,32,-11,35,-11,-25,127,-32,-27,28,-53,31,4, 
  /* [65][0][][] */ -93,-31,34,-45,62,-33,-69,-127,-85,-116,-74,-93,-47,7,-20,-2, 
  /* [66][0][][] */ -127,29,-26,-8,-32,10,40,-77,-29,-16,-7,-30,61,29,16,55, 
  /* [67][0][][] */ 40,-127,-82,57,-8,19,-21,58,84,13,-74,-39,8,-22,-14,-40, 
  /* [68][0][][] */ 82,-44,19,127,-61,-27,53,-16,-82,104,-1,15,-28,-72,16,-110, 
  /* [69][0][][] */ 26,70,8,24,21,6,79,-28,26,127,-17,48,-33,-27,7,40, 
  /* [70][0][][] */ -26,43,-15,-29,127,-13,58,-8,60,22,34,-48,25,69,10,32, 
  /* [71][0][][] */ -16,19,-12,61,37,-127,-21,96,28,-104,26,-14,4,-8,-28,89, 
  /* [72][0][][] */ -121,-48,-60,21,44,53,-19,67,26,-76,-127,23,38,35,88,85, 
  /* [73][0][][] */ 117,61,118,27,47,38,-71,10,72,127,57,17,59,119,-79,-2, 
  /* [74][0][][] */ 18,7,29,-25,-50,-35,4,-79,41,-50,-98,109,-127,59,-8,107, 
  /* [75][0][][] */ -56,29,-91,127,6,85,5,-23,-59,17,-20,39,-9,-61,-74,30, 
  /* [76][0][][] */ -36,29,-65,88,-23,51,-16,-127,-23,-119,-10,106,-32,-46,-44,-38, 
  /* [77][0][][] */ 127,50,-14,26,-23,30,-71,12,118,9,-14,50,-45,18,-83,40, 
  /* [78][0][][] */ -2,50,54,33,-44,-52,-27,127,61,29,-31,-9,-35,87,3,11, 
  /* [79][0][][] */ -63,-60,21,-37,24,56,-33,-127,4,-60,74,-35,103,-74,-7,-34, 
  /* [80][0][][] */ -45,-94,-106,46,-95,-30,-66,72,-49,-15,-127,99,-35,-67,-7,2, 
  /* [81][0][][] */ 97,-21,-20,75,92,127,75,-58,0,-95,-11,-85,9,2,-120,0, 
  /* [82][0][][] */ 86,127,-48,-4,-103,-84,-41,-10,-49,-59,82,-71,-44,25,-17,-1, 
  /* [83][0][][] */ 127,52,45,-42,14,-22,-19,45,17,47,101,-53,-35,-38,-27,-104, 
  /* [84][0][][] */ -30,1,-127,-1,0,-8,-38,-122,-30,-41,74,42,-67,-87,25,22, 
  /* [85][0][][] */ 3,-22,-19,-76,-44,-19,109,98,-38,127,-50,-92,-17,15,104,-36, 
  /* [86][0][][] */ 90,-24,-15,18,-41,-32,-5,-9,-9,-22,-127,-17,-11,-11,27,-5, 
  /* [87][0][][] */ -92,13,21,-79,13,127,-89,19,-70,-27,35,33,-22,-65,-17,29, 
  /* [88][0][][] */ -99,-6,-43,-85,-15,-76,-72,-24,1,-6,127,17,-10,4,95,-86, 
  /* [89][0][][] */ 19,44,-35,-21,-15,69,-20,106,127,51,34,31,-14,32,-111,79, 
  /* [90][0][][] */ -10,16,42,1,10,-23,32,5,48,127,4,1,21,24,20,-26, 
  /* [91][0][][] */ 15,-21,-37,10,39,-127,3,-1,5,34,-49,-28,29,47,-23,-15, 
  /* [92][0][][] */ -10,26,127,120,54,62,-34,-51,-80,-7,-48,81,67,109,-72,-19, 
  /* [93][0][][] */ 108,-85,-86,-10,-22,-77,34,60,6,37,-127,-6,-9,32,-20,70, 
  /* [94][0][][] */ -1,66,109,6,47,21,-11,95,43,-1,25,127,-42,108,-73,-15, 
  /* [95][0][][] */ -123,90,16,38,31,127,-14,10,91,19,116,22,-33,63,-14,-8, 
};
const TfArray<96, float> quant19_scale = { 96, { 0.00047503836685791612, 0.00094610860105603933, 0.00076786271529272199, 0.00235979282297194, 0.00066639797296375036, 0.0010270222555845976, 0.00074483803473412991, 0.00081111886538565159, 0.00061717675998806953, 0.00021195909357629716, 0.00072008254937827587, 0.001029759761877358, 0.0010926598915830255, 0.00035872217267751694, 0.00089865282643586397, 0.00056637305533513427, 0.00070386426523327827, 0.00090533093316480517, 0.0010515132453292608, 0.001271718880161643, 0.0010207580635324121, 0.00044864192022942007, 0.0010183625854551792, 0.00057157565606757998, 0.00045641552424058318, 0.00065764394821599126, 0.00065768870990723372, 0.00048722574138082564, 0.0014334616716951132, 0.00086292147170752287, 0.00062995555344969034, 0.00051511096535250545, 0.00039668314275331795, 0.0013578911311924458, 0.00057034112978726625, 0.0016475740121677518, 0.00064527243375778198, 0.0010130442678928375, 0.0012550007086247206, 0.00044503071694634855, 0.0012008340563625097, 0.0005092253559269011, 0.00054647686192765832, 0.00056160963140428066, 0.00079602631740272045, 0.0006379677215591073, 0.00086259969975799322, 0.00053221022244542837, 0.0008093978394754231, 0.00075806881068274379, 0.0010655109072104096, 0.0015713964821770787, 0.0005582848098129034, 0.00057426269631832838, 0.00087060831720009446, 0.00043229115544818342, 0.0014055338688194752, 0.00060695875436067581, 0.0011335377348586917, 0.0015270148869603872, 0.00041601239354349673, 0.00070001347921788692, 0.0011354576563462615, 0.0010208273306488991, 0.00097237614681944251, 0.00052870204672217369, 0.0010239686816930771, 0.001348374760709703, 0.00027936892001889646, 0.00067449541529640555, 0.00087361939949914813, 0.0016203080303966999, 0.00073232263093814254, 0.00065449014073237777, 0.00059903203509747982, 0.00093827577074989676, 0.00014712457777932286, 0.00089074356947094202, 0.00053028413094580173, 0.0011526319431141019, 0.00045344137470237911, 0.0010729159694164991, 0.00079607736552134156, 0.00088292238069698215, 0.00064291222952306271, 0.00095915549900382757, 0.00072442495729774237, 0.0006275332416407764, 0.00058836466632783413, 0.0011496980441734195, 0.00078903645044192672, 0.0017956584924831986, 0.00042353180469945073, 0.0003805694286711514, 0.0010509956628084183, 0.00045679413597099483, } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -37544, -8804, 239, -12936, -10258, -4433, -6507, -39404, 6123, 20781, 31697, -12689, 7947, -20518, 45043, -33331, };
const TfArray<16, float> quant20_scale = { 16, { 0.00057314155856147408, 0.00060652615502476692, 0.00074901652988046408, 0.0010102709056809545, 0.00075494922930374742, 0.00095433223759755492, 0.00096071435837075114, 0.00062353978864848614, 0.00059493078151717782, 0.00066183292074128985, 0.00067657727049663663, 0.0006749472813680768, 0.00089983514044433832, 0.0012215339811518788, 0.00041431593126617372, 0.00041660905117169023, } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -22,-8,-31,7,26,-1,-18,110,-14,62,69,8,-5,51,-37,51,7,-15,2,-16,51,-29,16,113,-29,97,-4,-7,-9,-10,13,-37,30,45,24,-54,1,39,27,-17,-109,-32,4,25,78,6,-127,-56, 
  /* [1][0][][] */ -70,-5,18,4,-41,21,-10,83,-65,-52,20,-47,-36,-35,7,-6,-5,98,-11,-5,18,-11,-48,-25,20,-46,28,32,-32,-82,-34,-6,-33,-20,31,-21,10,-48,29,12,-30,-2,127,-8,-6,16,35,-35, 
  /* [2][0][][] */ -15,1,-17,-35,-2,-68,-7,-17,12,18,15,14,11,34,-13,-6,4,-35,-24,-21,-18,-3,-9,-127,3,83,-4,4,-6,-18,6,-1,-14,43,10,1,23,-1,16,6,-57,10,-8,-19,9,-9,11,23, 
  /* [3][0][][] */ -9,35,6,-26,-11,-3,-14,4,-16,0,11,25,-127,14,-1,2,11,-3,-8,0,-30,2,-3,18,-10,-22,-10,23,-13,17,4,6,22,-11,19,19,3,32,46,4,12,13,18,-15,7,4,8,7, 
  /* [4][0][][] */ 20,-35,15,15,5,32,10,-23,-28,24,-22,-27,-6,24,15,0,38,-24,-58,25,-19,10,14,71,-17,-10,12,64,5,-73,26,11,37,-59,32,-127,15,31,13,30,5,28,-1,-34,-23,-42,10,0, 
  /* [5][0][][] */ 30,2,-28,50,10,-13,-19,28,11,-9,67,0,2,74,-7,8,-60,32,32,-13,12,-1,-15,-18,-4,-41,-25,-17,2,-2,-5,-7,68,-127,1,29,-30,-4,18,4,-82,57,17,3,2,-3,-83,-29, 
  /* [6][0][][] */ 43,7,11,15,-16,-1,-8,-25,11,-4,6,6,-15,-10,3,-6,16,-18,127,22,5,3,28,-39,8,-5,25,-16,-19,2,-6,21,3,9,26,-31,-2,-30,49,38,3,-16,10,7,-13,4,21,-14, 
  /* [7][0][][] */ -40,-34,-48,28,-26,64,-26,51,9,42,21,127,85,54,-1,-2,11,-36,7,-16,-49,18,-15,60,-13,-31,-94,-42,21,-16,-15,3,32,10,-23,2,18,-54,85,-3,26,26,-79,-83,9,-20,28,-10, 
  /* [8][0][][] */ -39,-40,-18,5,-19,-3,13,35,-11,-38,36,33,54,58,-12,27,-5,88,-13,-8,-34,-16,9,-9,9,-8,19,43,-10,115,7,-8,-7,19,-27,-105,-127,57,39,18,36,-11,90,-24,29,19,31,33, 
  /* [9][0][][] */ -21,2,-23,11,12,-16,5,-4,38,-37,40,63,-45,14,25,-8,2,4,-34,-27,15,13,4,-29,9,34,46,-15,-14,30,17,20,4,18,46,-85,-2,-127,-85,18,-35,20,32,-23,-1,6,-2,-32, 
  /* [10][0][][] */ -15,-28,-56,-127,25,75,24,13,-28,40,49,-13,45,-55,-44,28,40,-26,43,-20,39,-20,27,38,-33,-83,-12,-22,39,6,21,-50,-32,-91,6,-5,-6,-43,19,-23,-43,-49,-13,-14,8,7,28,-38, 
  /* [11][0][][] */ -14,52,-7,47,31,-70,-98,-6,9,40,6,-23,-4,75,-27,-62,4,65,9,-14,-41,-102,-14,15,4,-39,9,-22,30,-28,-10,-90,45,-15,-35,-65,70,27,19,-115,4,66,127,-40,-2,-67,28,11, 
  /* [12][0][][] */ 127,-20,-26,-9,-3,26,23,84,33,6,-52,-29,-12,-33,-34,-6,6,-5,17,5,22,7,23,3,-2,-3,-13,9,-8,16,-20,-3,33,-89,-13,15,-11,28,-28,14,-32,-97,-2,-105,-51,-3,74,-26, 
  /* [13][0][][] */ 13,11,-8,1,0,-2,-4,-3,-8,16,16,20,-2,5,3,4,9,9,6,-5,7,-7,15,-5,6,-6,13,127,8,2,8,1,2,11,-40,18,6,-10,1,-5,-7,0,7,2,13,-11,9,-16, 
  /* [14][0][][] */ 64,-13,61,-53,37,52,47,-103,-49,-39,-19,91,-56,-31,15,-6,64,21,-44,69,27,11,77,-33,49,65,16,-97,6,-42,56,17,-17,85,-127,-55,-75,43,77,19,-35,15,28,5,5,-17,4,-10, 
  /* [15][0][][] */ -37,-89,-64,-52,88,36,74,-46,-26,17,-73,-80,106,46,-112,82,39,96,60,-108,-127,-55,11,-37,-80,-6,73,51,78,41,103,-15,12,62,77,106,-27,-102,1,-57,107,78,109,-31,-22,-20,-20,85, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.024358516559004784, 0.025777362287044525, 0.03183320164680481, 0.042936511337757111, 0.032085340470075607, 0.04055912047624588, 0.040830358862876892, 0.026500439271330833, 0.025284556671977043, 0.028127897530794144, 0.028754532337188721, 0.028685258701443672, 0.038242992013692856, 0.051915191113948822, 0.017608426511287689, 0.017705883830785751, } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 3595, 41466, -1405, 49419, 5039, 131007, -1876, 39808, 3978, 31653, 33636, 2642, 4178, 36775, -4431, 482, -333, -840, 1433, -1557, 381, -4823, -3633, -14875, -7577, 45441, 139760, 117596, 2875, 6686, 2285, 1380, 25818, 1449, 33110, 7930, 66639, 502, 65747, 3330, 2277, 55612, -1807, 4831, 46950, 1986, 2922, 52077, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 8.4677260019816458e-05, 3.4168704587500542e-05, 0.00015360434190370142, 4.4857788452645764e-05, 0.00010616112558636814, 6.6124317527282983e-05, 0.00011980758426943794, 0.00014353226288221776, 9.3646944151259959e-05, 4.1737439460121095e-05, 4.0275528590427712e-05, 7.5989912147633731e-05, 3.8965830754023045e-05, 3.0213896025088616e-05, 0.00015157065354287624, 0.00019356368284206837, 0.0002046908630291, 9.5378542027901858e-05, 0.00018228177214041352, 0.00021024806483183056, 6.8915149313397706e-05, 0.0001538918586447835, 9.5624476671218872e-05, 0.00010238136746920645, 8.3945378719363362e-05, 0.00010273423686157912, 2.0858617062913254e-05, 5.8521785831544548e-05, 0.0001097342319553718, 8.243812044383958e-05, 0.00010329269571229815, 0.00013513666635844857, 5.0573078624438494e-05, 0.00011375659232726321, 2.703559584915638e-05, 3.990385084762238e-05, 9.3552560429088771e-05, 7.725398609181866e-05, 9.0624642325565219e-05, 8.7679778516758233e-05, 0.00010677080717869103, 0.00010464266961207613, 0.00011222733883187175, 7.9048630141187459e-05, 2.4475184545735829e-05, 0.00013791634410154074, 8.2988968642894179e-05, 2.4538885554648004e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 62,-102,103,77,54,-27,96,-74,67,-110,-102,47,59,-47,-63,-93,84,91,45,79,53,-74,-84,60,-28,-36,-64,-76,-65,65,-69,-116,-26,48,83,74,-80,62,-68,-24,58,-80,48,69,-83,6,88,-33, 79,-94,127,80,-75,-68,-69,-91,90,-117,-87,73,88,-118,-96,81,-42,110,79,127,72,-119,52,65,-53,-76,-68,-83,53,86,-33,-127,-70,80,88,86,-92,82,-90,-16,75,-117,69,105,-72,-127,96,-95, 30,-66,72,39,19,-48,-54,-43,36,-42,-12,41,41,-93,-47,-10,-59,61,35,67,36,-60,42,27,-36,-47,-52,-28,27,40,99,-90,-84,53,39,39,-45,40,-44,-19,48,-47,37,48,-22,-15,41,-82, 
  /* [0][1][][] */ 87,-113,-43,76,53,-81,127,-94,67,-117,-77,81,85,-124,-15,-127,127,121,76,-32,73,115,-127,67,74,-74,-103,-107,-127,88,-86,-9,-82,71,110,109,-86,86,-90,90,87,-111,90,100,-91,90,97,-82, 127,-127,-55,127,-127,-127,-104,-127,127,-127,-127,127,127,-127,-16,90,-61,127,127,-46,127,127,75,127,127,-127,-127,-127,45,127,-32,16,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-22,127,-127, 57,-88,-37,59,41,-67,-58,-64,61,-33,-61,66,54,-54,-13,11,-67,69,51,-41,54,68,59,61,68,-69,-61,-52,34,49,127,7,-67,72,49,53,-45,68,-67,53,65,-67,69,68,-60,-71,70,-60, 
  /* [0][2][][] */ 40,-67,-43,54,26,-57,70,-48,52,-82,-20,43,54,-98,81,-77,73,51,39,-30,31,-6,-80,35,-24,-51,-58,-57,-80,34,-59,83,-70,41,56,48,-27,44,-57,-88,52,-55,42,59,-24,13,37,-80, 63,-77,-45,79,-57,-64,-80,-74,60,-90,-75,62,78,-54,127,30,-40,71,67,-47,60,-14,28,66,-38,-78,-90,-66,28,67,-37,110,-45,72,62,64,-51,66,-68,-102,73,-76,63,66,-72,40,68,-53, 30,-59,-32,53,36,-27,-31,-42,20,-25,-60,35,41,-1,70,22,-37,27,33,-50,31,2,40,41,-26,-29,-56,-33,31,38,56,48,-23,37,16,33,-27,27,-31,-59,31,-32,24,36,-54,3,38,-12, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0035987833980470896, 0.0014521698467433453, 0.0065281842835247517, 0.0019064559601247311, 0.0045118476264178753, 0.0028102835640311241, 0.0050918222405016422, 0.0061001209542155266, 0.0039799949154257774, 0.0017738412134349346, 0.001711710006929934, 0.0032295712735503912, 0.0016560477670282125, 0.001284090569242835, 0.0064417524263262749, 0.0082264561206102371, 0.0086993612349033356, 0.0040535880252718925, 0.0077469754032790661, 0.0089355427771806717, 0.002928893780335784, 0.0065404041670262814, 0.0040640402585268021, 0.0043512079864740372, 0.0035676786210387945, 0.0043662050738930702, 0.00088649120880290866, 0.002487175865098834, 0.0046637048944830894, 0.0035036199260503054, 0.0043899393640458584, 0.0057433084584772587, 0.0021493558306246996, 0.0048346552066504955, 0.0011490128235891461, 0.0016959136119112372, 0.0039759837090969086, 0.0032832943834364414, 0.0038515473715960979, 0.0037263904232531786, 0.0045377593487501144, 0.0044473134912550449, 0.0047696619294583797, 0.0033595666754990816, 0.0010401953477412462, 0.0058614443987607956, 0.003527031047269702, 0.0010429025860503316, } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 575, 557, 746, 209, 12341, 23752, 3057, -548, -1433, -698, 1575, 723, 2414, 980, 40642, 4396, 2303, -1517, -1258, 8913, -1395, 16974, 13125, 10391, 6042, 395, 3985, 4281, 8336, -602, 11610, 6793, 298, 4, 4612, 4946, -2023, 327, -75, 6880, -403, -1056, -1300, -792, 829, 3958, 1134, 1117, };
const TfArray<48, float> quant24_scale = { 48, { 0.00036312543670646846, 0.0012076343409717083, 0.00034951607813127339, 0.0003341185802128166, 0.00019289339252281934, 0.00017132876382675022, 0.00040462514152750373, 0.00025178774376399815, 0.00031312924693338573, 0.0010168359149247408, 0.0007423515198752284, 0.00032917608041316271, 0.00052200554637238383, 0.00083972531137987971, 9.0698922576848418e-05, 0.00031590196886099875, 0.0002319285849807784, 0.00039400396053679287, 0.00020210941147524863, 0.00013298414705786854, 0.00035506405401974916, 0.00015863773296587169, 0.00028143305098637938, 0.0001436616585124284, 0.00028176675550639629, 0.0002951860660687089, 0.0017397340852767229, 0.00043851224472746253, 0.00020653604588005692, 0.00041518700891174376, 0.00022981959045864642, 0.00018720451043918729, 0.00081979780225083232, 0.00030902892467565835, 0.00084722560131922364, 0.00039158959407359362, 0.0006832950166426599, 0.00035039830254390836, 0.00029894668841734529, 0.00023888140276540071, 0.00017716902948450297, 0.00024032471992541105, 0.00031641978421248496, 0.00025005117640830576, 0.0022515130694955587, 0.00035752804251387715, 0.00026269294903613627, 0.001135127036832273, } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,-4,34,77,-50,51,26,-44, 
  /* [1][0][][] */ 24,-18,65,-12,29,-25,72,127, 
  /* [2][0][][] */ -13,-17,-16,6,-127,-21,-10,10, 
  /* [3][0][][] */ 95,-10,19,-96,-127,20,8,-14, 
  /* [4][0][][] */ -127,52,-6,-20,2,-26,89,48, 
  /* [5][0][][] */ -103,-17,-13,-48,-127,7,-26,97, 
  /* [6][0][][] */ -66,-127,47,-4,29,-25,52,49, 
  /* [7][0][][] */ -46,3,11,59,127,-45,-29,10, 
  /* [8][0][][] */ 54,14,15,-127,-30,-16,-50,-64, 
  /* [9][0][][] */ 13,-127,59,-12,-25,59,-16,74, 
  /* [10][0][][] */ -76,10,-21,-10,-127,100,67,-18, 
  /* [11][0][][] */ 77,11,70,-4,-73,-46,-34,-127, 
  /* [12][0][][] */ -14,3,40,20,11,-72,127,67, 
  /* [13][0][][] */ 28,-44,-35,-6,127,109,97,-13, 
  /* [14][0][][] */ 95,65,88,-4,-127,50,-55,-86, 
  /* [15][0][][] */ -29,-127,3,-1,-23,-63,27,47, 
  /* [16][0][][] */ -49,-11,21,-7,-127,-9,-41,9, 
  /* [17][0][][] */ -20,102,-89,-12,-26,-73,127,-52, 
  /* [18][0][][] */ 103,-56,-35,11,-39,3,4,127, 
  /* [19][0][][] */ 127,-59,-56,27,110,-47,-25,5, 
  /* [20][0][][] */ 127,19,17,89,-26,109,28,-66, 
  /* [21][0][][] */ 111,20,-111,40,-77,104,-87,-127, 
  /* [22][0][][] */ -127,-2,44,-10,-50,104,-42,-69, 
  /* [23][0][][] */ -30,-49,4,23,-127,97,106,-33, 
  /* [24][0][][] */ 83,6,30,52,-127,-61,-52,37, 
  /* [25][0][][] */ 31,-12,17,-12,127,61,33,-48, 
  /* [26][0][][] */ -28,-52,-11,-29,-11,-127,66,-28, 
  /* [27][0][][] */ -17,-127,38,-9,-5,-54,27,-15, 
  /* [28][0][][] */ -110,-23,5,22,-94,-26,109,127, 
  /* [29][0][][] */ -23,54,48,-12,-17,54,-104,-127, 
  /* [30][0][][] */ 87,56,-22,47,-127,-65,-119,-41, 
  /* [31][0][][] */ -48,-17,8,23,46,-90,27,127, 
  /* [32][0][][] */ -42,-1,19,22,-103,-44,-127,2, 
  /* [33][0][][] */ -25,6,-11,19,-127,-53,-43,13, 
  /* [34][0][][] */ 11,-127,32,-46,-19,94,-53,49, 
  /* [35][0][][] */ -28,-60,-127,-14,23,-63,58,-70, 
  /* [36][0][][] */ -9,127,65,24,-18,1,-30,-26, 
  /* [37][0][][] */ -127,45,28,-29,78,-7,0,-97, 
  /* [38][0][][] */ -127,-6,-37,-8,56,4,2,94, 
  /* [39][0][][] */ -115,16,29,-5,89,-127,91,126, 
  /* [40][0][][] */ -45,-39,-27,-38,-121,75,127,9, 
  /* [41][0][][] */ -127,40,27,-68,-80,-77,-84,16, 
  /* [42][0][][] */ -67,-125,-94,20,-7,85,-127,-78, 
  /* [43][0][][] */ -95,7,-7,-127,120,64,90,15, 
  /* [44][0][][] */ 127,9,2,-47,35,-7,-10,11, 
  /* [45][0][][] */ -15,-127,-20,-9,22,-65,96,-1, 
  /* [46][0][][] */ 105,2,-12,-21,127,-28,-40,5, 
  /* [47][0][][] */ 127,11,-8,104,-27,27,-33,-89, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00065618590451776981, 0.0021822559647262096, 0.00063159310957416892, 0.00060376903275027871, 0.00034856804995797575, 0.00030959967989474535, 0.00073117791907861829, 0.00045499307452701032, 0.0005658402806147933, 0.0018374735955148935, 0.001341466442681849, 0.00059483770746737719, 0.00094329018611460924, 0.0015174257569015026, 0.00016389750817324966, 0.00057085073785856366, 0.00041910659638233483, 0.00071198493242263794, 0.00036522184382192791, 0.00024030901840887964, 0.00064161856425926089, 0.00028666635625995696, 0.0005085636512376368, 0.0002596038393676281, 0.00050916668260470033, 0.00053341605234891176, 0.0031437869183719158, 0.0007924136589281261, 0.00037322100251913071, 0.00075026374543085694, 0.00041529553709551692, 0.00033828793675638735, 0.0014814158203080297, 0.00055843079462647438, 0.0015309791779145598, 0.0007076220354065299, 0.001234748400747776, 0.00063318730099126697, 0.00054021168034523726, 0.00043167069088667631, 0.00032015333999879658, 0.0004342788306530565, 0.00057178642600774765, 0.00045185501221567392, 0.0040685972198843956, 0.00064607110107317567, 0.00047469936544075608, 0.0020512314513325691, } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { -33381, 34858, -19318, 2640, 15573, -3071, 30661, 53182, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.0005709109827876091, 0.00055594614241272211, 0.0014480592217296362, 0.0015420368872582912, 0.00062811747193336487, 0.00047738180728629231, 0.00056392926489934325, 0.00078761228360235691, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -18,-18,-9,22,-27,-54,-2,-6,-127,112,-22,80,99,-12,74,-6,9,-19,21,21,-2,-18,-8,-34,17,-71,42,52,5,-22,14,-38,6,-33,101,3,7,-14,22,-7,84,-14,16,20,-61,-19,-3,-19, 
  /* [1][0][][] */ 14,18,118,-17,-1,-46,-1,-98,-2,-18,33,-17,-8,17,-7,-127,4,-69,36,16,-24,53,33,-13,-35,-29,39,8,2,12,10,2,-17,7,-7,27,-19,-16,102,-64,-2,71,-18,47,2,-18,11,21, 
  /* [2][0][][] */ 22,-35,21,-31,35,-12,-5,-50,-4,-8,-5,16,-7,17,-8,-16,-80,127,-18,-26,-4,31,-43,-11,111,-12,23,16,-40,-23,-8,-46,-30,0,12,31,-14,9,-23,19,28,-21,-2,-7,22,40,-15,-38, 
  /* [3][0][][] */ 28,-81,-1,1,7,-36,-10,0,9,-44,17,16,6,1,41,-12,-35,-12,-2,38,24,27,-8,3,9,33,21,-12,3,-26,127,-11,-4,-12,-9,-16,-25,-12,-9,20,0,-6,-37,27,3,-10,-5,30, 
  /* [4][0][][] */ -76,3,-2,-16,-1,-50,-2,21,39,-44,24,-23,-30,22,-19,-7,18,6,0,24,6,-13,20,-7,5,52,-4,91,4,34,14,-26,18,-127,-25,13,-1,-4,-5,-8,-6,-7,-21,20,-66,8,-12,7, 
  /* [5][0][][] */ -15,7,10,-12,-42,37,-16,77,-5,25,3,-2,19,-34,0,72,17,-78,34,4,28,-63,2,30,-1,-26,-66,-44,-10,-4,20,-26,28,-85,-3,-78,67,-11,-34,23,22,-57,22,0,127,-45,-33,-9, 
  /* [6][0][][] */ -28,-9,-17,-9,48,-72,-15,-31,-55,14,36,-26,-28,49,-20,-53,47,3,-24,-71,-68,78,-8,-106,33,42,-69,-106,13,95,4,3,25,-68,-60,78,-90,-9,25,-76,10,2,19,63,127,-44,24,7, 
  /* [7][0][][] */ 27,39,-80,18,-30,19,9,68,0,-6,71,-7,2,-62,-41,0,-55,-127,35,-8,70,57,0,-32,1,-14,48,-39,-36,15,-12,15,-7,40,-29,-69,-15,-83,-48,-57,-18,-22,13,69,-35,-5,-13,-21, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.024263715371489525, 0.023627711459994316, 0.061542514711618423, 0.065536566078662872, 0.026694992557168007, 0.020288726314902306, 0.023966992273926735, 0.03347352147102356, } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -51991, -1701, 13967, 3255, 9237, -9198, 3278, 18379, 3246, 29771, -670, 33703, -6658, -606, 23382, 15197, -144, 19530, 44803, 11444, -173, -229, -4065, 24678, -7030, 28654, 46038, 35848, 1543, 1427, -2387, 2273, 1108, 15407, -6408, 17074, -11649, 15099, -24061, 126881, 31165, 22570, 17392, -2172, 11517, 3307, 2397, -1762, };
const TfArray<48, float> quant28_scale = { 48, { 0.00029055753839202225, 0.00026341146440245211, 0.00013608063454739749, 0.00019007349328603595, 0.00010451694106450304, 0.00010838110028998926, 0.00031586750992573798, 0.00020122530986554921, 0.0001244136510649696, 0.0001649493642617017, 7.5834934250451624e-05, 0.00012588761455845088, 0.00024080333241727203, 0.00014984013978391886, 0.00010065816604765132, 0.00010752623347798362, 0.00027707009576261044, 0.00022443693887908012, 5.149356002220884e-05, 0.00016630902246106416, 0.00023594385129399598, 0.00022165221162140369, 0.00010744726023403928, 8.4470018919091672e-05, 0.00015609565889462829, 0.00012072213576175272, 0.00047486522817052901, 0.00010196940274909139, 0.00015664139937143773, 0.0005093278014101088, 0.00010656053200364113, 0.00015486047777812928, 0.00067161826882511377, 0.00017175071116071194, 0.00017453559848945588, 0.00015439419075846672, 0.00031919730827212334, 0.00016761073493398726, 0.00021099652803968638, 1.9921173588954844e-05, 9.5436625997535884e-05, 5.0348295189905912e-05, 9.1881724074482918e-05, 0.00017700290482025594, 0.00020055576169397682, 0.00011773990263463929, 0.00011240535241086036, 8.6485066276509315e-05, } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 4,4,20,103,2,82,8,28,16,8,6,7,-10,-13,-45,10,-1,7,-26,-102,-11,-28,127,-8,-5,9,-5,9,0,6,20,94,18,30,42,-24,1,30,-2,4,17,-74,-18,-8,17,0,-4,-12, 120,13,14,-127,25,99,14,10,117,127,6,44,-56,-26,4,7,127,-56,-58,-52,-98,28,-104,15,20,77,-30,-88,28,21,12,-127,5,-60,127,12,-42,-49,-6,119,-79,-103,-39,8,-37,-13,-127,26, -28,-1,10,11,-3,72,7,20,30,14,-25,32,-15,-5,21,7,-100,26,-8,70,-36,-13,-14,-4,-2,-56,-2,21,-12,5,1,-27,10,-22,21,-14,1,43,49,-13,48,40,-18,12,-47,0,-2,-3, 
  /* [0][1][][] */ 127,8,-1,-98,9,-36,37,-16,1,5,-6,52,-8,-6,19,-31,0,-50,-56,-75,10,-80,-122,-15,1,102,-17,-127,-4,31,12,-111,16,-51,-1,127,-2,51,-41,43,-61,-127,38,-87,-45,-16,-14,-5, 26,-122,-127,109,-127,-127,-127,-127,-127,-96,127,-127,127,127,36,-127,-81,127,127,-97,127,127,112,127,127,-127,-127,30,-127,-127,92,127,-127,127,-36,-46,127,-127,127,121,127,-70,127,127,127,-119,101,110, 53,4,50,-15,1,-63,45,21,-23,14,-110,-9,-3,-44,127,9,61,-66,-65,72,14,-49,14,-30,-2,8,-38,65,23,38,-4,4,33,-45,4,68,-3,58,77,-7,-80,14,-92,-31,25,-17,-10,6, 
  /* [0][2][][] */ -51,-4,22,-19,2,32,-35,23,1,-26,13,33,9,-10,-34,20,6,21,-6,98,10,-31,-15,-11,-7,26,-2,52,-8,3,44,-32,-16,-43,-31,-48,0,28,12,-15,9,-19,42,-44,-35,19,-17,21, 61,127,70,19,9,-14,126,36,6,-10,37,26,0,-4,-94,29,-58,-56,-32,106,-31,62,14,21,25,-68,-40,31,80,0,127,19,85,-24,2,-43,-26,-20,-9,127,-27,-13,-39,39,21,-29,3,-127, -39,-2,7,-6,1,1,-61,11,-28,-15,-50,-42,25,-13,-5,16,32,22,-9,-127,28,-7,8,-6,-11,6,-9,-57,-11,8,-3,-1,-18,84,-44,-25,-4,32,28,-50,6,6,-36,4,-48,127,-8,-5, 
};
const TfArray<48, float> quant29_scale = { 48, { 0.012348695658147335, 0.011194987222552299, 0.0057834270410239697, 0.0080781234428286552, 0.0044419700279831886, 0.0046061966568231583, 0.01342436857521534, 0.0085520753636956215, 0.0052875801920890808, 0.0070103476755321026, 0.0032229847274720669, 0.0053502237424254417, 0.01023414172232151, 0.0063682058826088905, 0.0042779720388352871, 0.0045698648318648338, 0.011775478720664978, 0.009538569487631321, 0.0021884762682020664, 0.0070681334473192692, 0.010027613490819931, 0.0094202188774943352, 0.0045665083453059196, 0.003589975880458951, 0.0066340654157102108, 0.0051306905224919319, 0.020181771367788315, 0.0043336995877325535, 0.0066572590731084347, 0.021646430715918541, 0.0045288223773241043, 0.0065815700218081474, 0.028543775901198387, 0.0072994050569832325, 0.0074177626520395279, 0.006561752874404192, 0.013565885834395885, 0.0071234558708965778, 0.0089673520997166634, 0.00084664986934512854, 0.0040560564957559109, 0.0021398025564849377, 0.0039049731567502022, 0.0075226235203444958, 0.0085236197337508202, 0.0050039459019899368, 0.0047772275283932686, 0.00367561518214643, } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 64950, 10919, 5501, 14039, 2329, 11529, -1597, -399, 1079, 3275, 4466, 43, 3140, -663, 1926, -2386, 4022, 13364, -293, 19735, 6096, 3808, 8070, -264, 3983, 6114, 30737, 10004, -117, -3272, 111, 2120, -3067, 8940, 2931, 4607, 9347, 6350, 17200, 2308, -1817, 2182, 831, 5488, 8409, 5544, -2091, 5260, };
const TfArray<48, float> quant30_scale = { 48, { 6.6700908064376563e-05, 0.00022270152112469077, 0.00025487082893960178, 0.00023030498414300382, 0.0009582734783180058, 0.00043689770973287523, 0.0012404043227434158, 0.00089357001706957817, 0.00051989092025905848, 0.00044906686525791883, 0.00057143106823787093, 0.00056408654199913144, 0.00037373218219727278, 0.00052265170961618423, 0.00039335040492005646, 0.0015369512839242816, 0.00031353646772913635, 0.00031705477158538997, 0.0017757745226845145, 0.00013431641855277121, 0.00020520154794212431, 0.00025659325183369219, 0.00048846896970644593, 0.0010181093821302056, 0.00030225806403905153, 0.00018032359366770834, 0.00013107109407428652, 0.00035764594213105738, 0.00074297189712524414, 0.00078624725574627519, 0.00054932798957452178, 0.00036288189585320652, 0.00062516477191820741, 0.00023306958610191941, 0.00036439514951780438, 0.00037308791070245206, 0.00039984250906854868, 0.00021324596309568733, 0.00012647897528950125, 0.0020060946699231863, 0.00049582932842895389, 0.0012500266311690211, 0.00036940345307812095, 0.00029639762942679226, 0.00014501473924610764, 0.00018388938042335212, 0.00057035742793232203, 0.0004974108305759728, } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 77,-11,-14,-29,127,-14,-49,16, 
  /* [1][0][][] */ -24,12,7,127,29,-30,-15,23, 
  /* [2][0][][] */ 55,-127,-17,77,-4,-70,75,-36, 
  /* [3][0][][] */ 88,-127,10,115,-69,-61,8,3, 
  /* [4][0][][] */ 45,-52,127,-6,-41,-66,43,-102, 
  /* [5][0][][] */ 45,-27,-56,-33,127,54,-34,12, 
  /* [6][0][][] */ -27,79,-18,127,24,-60,-26,10, 
  /* [7][0][][] */ -25,127,7,10,23,24,-3,-25, 
  /* [8][0][][] */ 127,24,-26,-15,-125,-48,8,-63, 
  /* [9][0][][] */ -127,-4,-30,48,80,44,-19,22, 
  /* [10][0][][] */ -17,-29,-50,127,114,-13,-57,20, 
  /* [11][0][][] */ -127,2,8,-45,24,23,-5,-67, 
  /* [12][0][][] */ 127,-16,27,47,-63,11,15,-62, 
  /* [13][0][][] */ -41,63,-113,31,29,127,-12,96, 
  /* [14][0][][] */ -29,0,-3,127,-6,26,13,-35, 
  /* [15][0][][] */ -21,127,7,11,-7,8,35,-63, 
  /* [16][0][][] */ 8,-127,2,-16,-52,-72,85,-6, 
  /* [17][0][][] */ 30,127,22,6,-7,65,-66,-5, 
  /* [18][0][][] */ 9,3,-127,0,-19,40,7,50, 
  /* [19][0][][] */ -24,-8,19,-24,-127,8,-1,22, 
  /* [20][0][][] */ -127,-69,-98,-31,24,-60,-4,-31, 
  /* [21][0][][] */ -107,-2,-2,-1,-127,32,-35,-46, 
  /* [22][0][][] */ -127,-25,49,-75,85,-13,-25,34, 
  /* [23][0][][] */ -23,-28,-29,6,-7,96,-127,-96, 
  /* [24][0][][] */ -4,27,-127,-1,16,48,-16,52, 
  /* [25][0][][] */ 85,-98,-5,101,-84,-34,127,12, 
  /* [26][0][][] */ -1,-11,13,7,-25,127,105,-32, 
  /* [27][0][][] */ 77,-9,-3,20,127,4,-15,11, 
  /* [28][0][][] */ 23,75,-97,14,0,127,-13,115, 
  /* [29][0][][] */ 55,40,53,-18,3,43,-127,-116, 
  /* [30][0][][] */ 19,4,-6,-127,-3,-13,-8,-18, 
  /* [31][0][][] */ 5,-18,-6,5,-127,-47,9,29, 
  /* [32][0][][] */ 51,35,125,-127,45,18,-94,-123, 
  /* [33][0][][] */ -46,-9,17,31,-127,5,13,4, 
  /* [34][0][][] */ -127,28,13,31,-23,-49,14,24, 
  /* [35][0][][] */ 3,53,-51,4,-8,-80,127,-27, 
  /* [36][0][][] */ -43,75,35,2,-44,106,-127,-54, 
  /* [37][0][][] */ 56,-114,-36,42,108,-127,94,-19, 
  /* [38][0][][] */ 48,-127,-7,50,-1,75,49,94, 
  /* [39][0][][] */ 24,-127,-24,-17,-7,0,-32,-75, 
  /* [40][0][][] */ 127,72,2,-83,-34,96,-56,-108, 
  /* [41][0][][] */ 23,-127,13,-18,-13,63,-29,81, 
  /* [42][0][][] */ 45,-82,-35,-111,-127,47,65,-57, 
  /* [43][0][][] */ -19,-35,27,-102,127,-1,-42,37, 
  /* [44][0][][] */ -22,-19,62,18,-92,123,127,-17, 
  /* [45][0][][] */ -97,-119,-58,-44,108,-121,65,127, 
  /* [46][0][][] */ 127,-3,120,23,2,29,-30,36, 
  /* [47][0][][] */ 85,42,109,127,-63,35,89,-18, 
};
const TfArray<48, float> quant31_scale = { 48, { 0.00017471006140112877, 0.00058332335902377963, 0.00066758459433913231, 0.00060323916841298342, 0.0025100111961364746, 0.0011443686671555042, 0.0032489981967955828, 0.0023405330721288919, 0.0013617532094940543, 0.0011762434151023626, 0.0014967526076361537, 0.0014775150921195745, 0.00097891886252909899, 0.001368984580039978, 0.0010303049348294735, 0.0040257452055811882, 0.00082124787149950862, 0.00083046336658298969, 0.0046512964181602001, 0.00035181574639864266, 0.00053748558275401592, 0.00067209615372121334, 0.0012794495560228825, 0.002666739746928215, 0.00079170626122504473, 0.00047232263023033738, 0.00034331527422182262, 0.00093678402481600642, 0.0019460705807432532, 0.0020594219677150249, 0.0014388578711077571, 0.00095049862284213305, 0.0016374975675716996, 0.00061048049246892333, 0.00095446227351203561, 0.00097723130602389574, 0.0010473097208887339, 0.00055855634855106473, 0.00033128709765151143, 0.0052545750513672829, 0.001298728515394032, 0.0032742018811404705, 0.00096758053405210376, 0.00077635602792724967, 0.00037983793299645185, 0.00048166251508519053, 0.0014939404791221023, 0.0013028710382059216, } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { -4604, -31182, 2635, 26705, 2579, 4278, 43452, 18007, };
const TfArray<8, float> quant32_scale = { 8, { 0.00082419911632314324, 0.00061976606957614422, 0.00080528174294158816, 0.001153151853941381, 0.00090690009528771043, 0.0010619191452860832, 0.0007634503417648375, 0.00070269982097670436, } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -8,-4,12,-98,8,30,13,0,3,23,5,1,95,0,1,7,0,-17,-6,2,69,-16,2,-9,34,54,18,15,-2,6,-3,-127,12,-19,5,-4,-23,2,-22,26,3,-33,9,-3,0,-8,11,16, 
  /* [1][0][][] */ -38,2,8,0,50,31,-36,105,10,-8,-19,-3,17,0,8,37,0,56,9,-61,3,23,127,22,-22,1,58,-8,35,-12,18,-2,13,-7,-10,-34,10,-64,20,5,-9,-1,-97,-8,-46,18,-52,-79, 
  /* [2][0][][] */ -46,27,-28,25,36,20,23,30,-26,54,5,-7,29,0,18,45,0,21,-127,4,12,10,17,-22,-46,41,41,10,0,18,8,23,-4,-14,-2,-17,15,1,71,15,22,23,-28,-2,20,-62,22,17, 
  /* [3][0][][] */ -9,5,-22,5,-3,44,9,-1,63,-8,2,-6,18,0,-33,5,0,12,-9,-8,1,6,11,-7,1,-13,-3,-12,3,-12,-8,-1,-44,35,-57,7,-6,2,-16,-127,-8,20,13,-35,-4,0,6,10, 
  /* [4][0][][] */ -7,-1,75,20,9,-22,-1,3,7,6,-8,-2,-68,0,-1,6,0,-9,9,7,43,2,4,-12,-10,22,2,36,20,0,11,62,-4,5,4,-9,5,-9,-11,-11,-6,-127,5,-8,5,4,-2,-5, 
  /* [5][0][][] */ -8,43,5,-14,-2,37,29,16,-24,34,14,82,20,0,-127,-1,0,21,-42,17,-13,23,-11,45,-31,9,30,-1,-21,25,14,-19,38,24,-40,0,9,18,-56,17,30,-9,-17,28,15,59,22,21, 
  /* [6][0][][] */ -33,-68,-5,8,50,-30,-26,4,30,-35,-12,112,-5,0,-127,47,0,-11,39,-13,-10,-11,21,-31,21,0,-8,-38,32,0,18,5,99,-49,30,8,-16,-17,-88,-19,-24,-22,-12,-40,-27,-68,-21,-12, 
  /* [7][0][][] */ -127,-32,-3,10,122,15,61,15,4,-1,1,-64,-21,0,84,116,0,8,9,70,-9,-4,-34,40,19,7,33,4,59,64,66,-13,-7,-4,-19,-30,-1,16,38,34,69,-15,-18,5,57,-5,64,79, 
};
const TfArray<8, float> quant33_scale = { 8, { 0.035028461366891861, 0.026340058073401451, 0.034224472939968109, 0.04900895431637764, 0.038543254137039185, 0.045131564140319824, 0.032446637749671936, 0.029864741489291191, } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 50634, 51426, 66651, 48233, -502, 14515, 2748, 34497, 27426, 43271, 25646, 1110, -46943, -127, 66927, 89, -204, 58421, 1371, -624, -17478, 7926, 63758, 43635, 7550, 55055, 58890, 23875, -2132, 10012, -12444, -50892, 16500, 86888, 31603, 1001, 54351, -1374, 143466, -25827, 13371, -28928, 1366, 101761, -7644, 109038, 16, -22663, };
const TfArray<48, float> quant34_scale = { 48, { 0.00011872985487570986, 8.2746271800715476e-05, 0.00010862840281333774, 0.00010304780153091997, 0.0001239068660652265, 0.00013719299749936908, 0.00010788117651827633, 5.2130682888673618e-05, 7.8376979217864573e-05, 2.4654413209646009e-05, 6.158572796266526e-05, 2.8276690500206314e-05, 0.00014835041656624526, 0.005541567225009203, 4.0966191590996459e-05, 0.00021489114442374557, 0.0027484172023832798, 1.5379408068838529e-05, 6.1874357925262302e-05, 0.00017301600018981844, 9.224929817719385e-05, 0.00010191951878368855, 9.3429633125197142e-05, 2.7408112146076746e-05, 3.9020345866447315e-05, 5.039221650804393e-05, 2.3342558051808737e-05, 4.2220995965180919e-05, 0.0002228386583738029, 4.4360065658111125e-05, 3.7062673072796315e-05, 0.00017055051284842193, 0.0001467624242650345, 9.1351512310211547e-06, 7.5187279435340315e-05, 0.00028129311976954341, 1.2151082046329975e-05, 0.00040621569496579468, 3.2316700526280329e-05, 0.00010672357893781736, 5.6325941841350868e-05, 0.00013920210767537355, 0.0001420951884938404, 8.3287086454220116e-06, 0.00012252753367647529, 5.3738953283755109e-05, 0.00012006259203189984, 6.2265549786388874e-05, } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -36,-20,-8,-17,9,-41,-81,-84,-22,-44,5,46,37,-71,113,-39,-113,-76,44,-5,3,-73,-110,-83,-36,-119,-73,-24,61,23,97,27,-127,-92,-3,60,16,52,-127,77,-75,-6,103,-104,2,-41,-95,108, 77,8,-28,-29,57,-127,-127,-92,75,-81,-122,85,41,-82,-1,62,-52,-107,65,10,14,-127,-127,-73,-3,-127,-126,-32,-66,27,-61,54,27,-127,72,99,13,77,-91,127,-127,11,112,-127,7,-29,-127,84, -33,31,4,-8,-66,-110,-62,-19,91,-18,-127,29,8,-71,-101,-11,-127,-11,29,14,-7,-64,-37,-28,-11,-42,-66,-8,-22,27,-20,7,100,-87,73,35,12,38,-8,16,-75,11,8,-79,-12,-2,-56,15, 
  /* [0][1][][] */ -83,-127,-47,-49,-13,53,101,-117,-27,-99,-12,96,91,-64,27,-97,-121,-99,94,-76,41,-83,-101,-127,42,-127,-78,-28,127,-60,127,85,-45,-85,-3,78,-41,-79,-98,83,47,62,101,-104,-86,-123,90,113, 127,-78,-127,-127,127,42,97,-127,102,-127,-103,127,127,-14,-8,127,-60,-127,127,-127,127,-126,-108,-120,127,-82,-127,-127,-119,-127,-78,127,27,-99,124,127,-73,-127,-88,86,64,127,127,-99,-105,-127,127,127, -51,22,-66,-90,-117,-23,30,-36,127,-30,-65,41,58,-70,-28,-44,-37,-41,55,-69,56,-75,-35,-25,48,0,-53,-70,14,-88,-36,23,29,-102,127,30,-38,-66,4,-9,36,58,21,-75,-50,-40,66,34, 
  /* [0][2][][] */ -58,-106,-35,-44,-5,32,-7,-51,-34,-64,-8,53,78,-127,-127,-63,-43,-24,63,79,53,-44,-13,-56,35,-59,-14,-46,71,36,79,65,106,-23,-32,-9,-94,39,-20,26,11,38,17,-52,95,-82,4,26, 85,-54,-92,-95,84,20,8,-56,40,-76,-17,59,87,-26,16,92,-24,-45,72,117,81,-50,-19,-62,95,-62,-23,-81,-49,49,-50,114,-17,-45,60,10,-127,57,-18,-4,10,35,29,-59,127,-100,-18,33, -23,21,-41,-46,-78,-18,25,-20,53,-22,-2,44,36,-43,111,-27,-93,-4,30,56,73,-34,-1,-7,44,-4,-6,-53,-12,33,-23,41,-88,-44,78,1,-22,21,22,-35,10,34,-2,-9,62,-37,-5,15, 
};
const TfArray<48, float> quant35_scale = { 48, { 0.0050460188649594784, 0.0035167164169251919, 0.0046167070977389812, 0.0043795313686132431, 0.0052660419605672359, 0.0058307023718953133, 0.004584949929267168, 0.0022155540063977242, 0.0033310214057564735, 0.0010478125186637044, 0.0026173933874815702, 0.0012017593253403902, 0.0063048927113413811, 0.23551659286022186, 0.0017410630825906992, 0.0091328732669353485, 0.1168077290058136, 0.00065362482564523816, 0.0026296600699424744, 0.0073531796224415302, 0.0039205951616168022, 0.0043315794318914413, 0.003970759455114603, 0.0011648447252810001, 0.0016583646647632122, 0.0021416691597551107, 0.00099205865990370512, 0.0017943923594430089, 0.0094706425443291664, 0.0018853027140721679, 0.0015751635655760765, 0.0072483965195715427, 0.0062374030239880085, 0.00038824390503577888, 0.0031954592559486628, 0.011954957619309425, 0.00051642098696902394, 0.017264166846871376, 0.0013734598178416491, 0.0045357518829405308, 0.0023938524536788464, 0.0059160897508263588, 0.0060390452854335308, 0.00035397012834437191, 0.0052074198611080647, 0.0022839053999632597, 0.0051026600413024426, 0.0026462858077138662, } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 3169, -97, 7368, 7270, 7704, 7060, 10794, -275, -40, -346, 2834, 433, 12417, -82916488, 2611, 16221, -66934488, -132, -263, 18653, 3198, -15, 118, 374, 2956, -416, 62, 1342, 4091, 1765, 2596, 11683, 3319, 389, 76, -4096, 406, 3361, -261, 13930, 1986, 7680, -713, -133, 17494, 182, 7295, 3514, };
const TfArray<48, float> quant36_scale = { 48, { 0.00055617059115320444, 0.00057791813742369413, 0.00041669118218123913, 0.00026342083583585918, 0.00027065235190093517, 0.00030675780726596713, 0.00038118215161375701, 0.0010405781213194132, 0.00036421153345145285, 0.0021685760002583265, 0.00059182278346270323, 0.0022611238528043032, 0.00017891937750391662, 1.9559880382047368e-09, 0.0010086121037602425, 0.00020171822689007968, 1.9559880382047368e-09, 0.0051020639948546886, 0.00044710331712849438, 0.00020862455130554736, 0.00035396462772041559, 0.0040103602223098278, 0.00048832484753802419, 0.0016851813998073339, 0.0012804337311536074, 0.00099323655012995005, 0.0019281510030850768, 0.0012483432656154037, 0.00026160976267419755, 0.0016374225961044431, 0.0011078609386458993, 0.00020098472305107862, 0.00023524521384388208, 0.008220599964261055, 0.00049728952581062913, 0.00031504407525062561, 0.0029480664525181055, 0.00036068374174647033, 0.0029566537123173475, 0.00024221951025538146, 0.0013296533143147826, 0.00030289785354398191, 0.0003167620743624866, 0.0076186973601579666, 0.00028538919286802411, 0.00045634154230356216, 0.00033145619090646505, 0.0002209921512985602, } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -6,-127,55,-59,-10,-18,-74,40, 
  /* [1][0][][] */ 41,42,-12,-72,-20,17,-67,127, 
  /* [2][0][][] */ 37,-7,2,103,26,127,21,69, 
  /* [3][0][][] */ 70,86,-86,127,-110,-25,-16,18, 
  /* [4][0][][] */ -26,-90,47,36,-19,25,-22,-127, 
  /* [5][0][][] */ 28,-18,-19,41,16,-34,27,127, 
  /* [6][0][][] */ 66,12,-127,-65,122,68,39,-25, 
  /* [7][0][][] */ 127,-15,19,-21,53,-4,83,-60, 
  /* [8][0][][] */ 37,-110,13,105,-15,59,6,-127, 
  /* [9][0][][] */ 64,-115,63,89,29,43,-127,76, 
  /* [10][0][][] */ -127,-16,-122,32,-43,37,-40,39, 
  /* [11][0][][] */ -10,-43,-20,-94,-127,-31,42,-16, 
  /* [12][0][][] */ 19,-8,-60,71,-127,10,91,125, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -3,-26,-7,-12,11,127,35,31, 
  /* [15][0][][] */ 63,-6,9,-127,18,60,-65,54, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ -1,70,127,48,-50,-13,41,8, 
  /* [18][0][][] */ 80,-126,25,46,22,-29,-127,-35, 
  /* [19][0][][] */ -107,-27,46,127,-86,-44,-87,32, 
  /* [20][0][][] */ 22,33,-19,73,-4,-127,-22,22, 
  /* [21][0][][] */ 63,60,127,17,-40,2,53,16, 
  /* [22][0][][] */ -54,1,-127,-12,24,13,-94,0, 
  /* [23][0][][] */ -111,102,-2,10,30,18,127,-86, 
  /* [24][0][][] */ 10,-35,-33,127,6,-61,86,116, 
  /* [25][0][][] */ 22,28,38,33,114,127,-48,-58, 
  /* [26][0][][] */ -72,-47,-127,24,20,29,-116,-9, 
  /* [27][0][][] */ -31,6,12,-25,-71,127,55,56, 
  /* [28][0][][] */ -14,-13,-19,107,65,127,69,15, 
  /* [29][0][][] */ 109,-13,127,41,44,2,59,7, 
  /* [30][0][][] */ -97,127,-18,-58,-10,-14,97,-40, 
  /* [31][0][][] */ -36,-99,-21,0,78,-65,127,105, 
  /* [32][0][][] */ 28,15,-32,127,-25,75,78,91, 
  /* [33][0][][] */ 16,93,-4,-127,-10,10,21,101, 
  /* [34][0][][] */ 10,78,0,-89,82,4,-4,127, 
  /* [35][0][][] */ 127,-4,-64,-87,18,41,104,-74, 
  /* [36][0][][] */ -127,-8,28,47,-73,16,-62,116, 
  /* [37][0][][] */ -5,-37,-7,17,8,127,32,70, 
  /* [38][0][][] */ 1,14,-6,66,127,-9,-16,31, 
  /* [39][0][][] */ 4,33,39,-114,29,-11,-61,127, 
  /* [40][0][][] */ 75,2,95,-9,-16,-15,127,-27, 
  /* [41][0][][] */ -6,-30,-37,42,37,127,55,78, 
  /* [42][0][][] */ -45,10,127,48,-12,6,-43,62, 
  /* [43][0][][] */ -72,-53,5,99,-49,25,46,-127, 
  /* [44][0][][] */ 40,-6,-86,-65,102,-42,4,-127, 
  /* [45][0][][] */ -118,127,-14,-48,5,4,108,-46, 
  /* [46][0][][] */ -127,-12,51,19,-35,37,-87,39, 
  /* [47][0][][] */ 83,39,125,-19,25,-43,127,-21, 
};
const TfArray<48, float> quant37_scale = { 48, { 0.0011194588150829077, 0.0011632322566583753, 0.00083871500100940466, 0.00053021282656118274, 0.00054476840887218714, 0.00061744137201458216, 0.00076724251266568899, 0.0020944729913026094, 0.00073308410355821252, 0.0043649044819176197, 0.001191219431348145, 0.0045511843636631966, 0.00036012846976518631, 3.937008052901092e-09, 0.0020301318727433681, 0.00040601796354167163, 3.937008052901092e-09, 0.010269422084093094, 0.00089992844732478261, 0.00041991897160187364, 0.00071245915023609996, 0.0080720428377389908, 0.00098289910238236189, 0.0033919289708137512, 0.0025772538501769304, 0.0019991840235888958, 0.0038809776306152344, 0.0025126622058451176, 0.00052656751358881593, 0.0032958001829683781, 0.0022298998665064573, 0.00040454155532643199, 0.00047350098611786962, 0.016546403989195824, 0.0010009431280195713, 0.00063411996234208345, 0.005933860782533884, 0.00072598335100337863, 0.0059511451981961727, 0.00048753884038887918, 0.0026763228233903646, 0.00060967204626649618, 0.00063757790485396981, 0.015334894880652428, 0.00057443068362772465, 0.00091852311743423343, 0.00066715420689433813, 0.0004448124673217535, } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { 2347, -45051, -14888, -10370, -35202, -2044, -20469, -33573, };
const TfArray<8, float> quant38_scale = { 8, { 0.001812726492062211, 0.0017126004677265882, 0.0026264970656484365, 0.0012110680108889937, 0.0010207706363871694, 0.0016901687486097217, 0.0011889449087902904, 0.00092967564705759287, } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-14,10,-15,127,27,5,-34,-1,-127,-95,-13,0,118,-14,0, 
  /* [1][0][][] */ 0,-30,-4,95,78,20,20,24,-4,-4,127,-40,0,26,-15,0, 
  /* [2][0][][] */ 0,-6,20,-10,-55,17,14,5,5,13,-11,12,0,127,-16,0, 
  /* [3][0][][] */ 0,3,-21,-127,75,24,67,-5,-7,62,4,34,0,4,18,0, 
  /* [4][0][][] */ 0,52,-1,43,-89,38,127,24,6,-82,27,9,0,-14,27,0, 
  /* [5][0][][] */ 0,-6,-10,1,-19,-29,-21,9,-4,9,-5,-37,0,-3,127,0, 
  /* [6][0][][] */ 0,3,-7,1,38,2,-42,-15,4,-120,117,74,0,127,76,0, 
  /* [7][0][][] */ 0,35,-34,127,27,13,28,1,7,80,-66,52,0,3,63,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.077040873467922211, 0.072785519063472748, 0.11162612587213516, 0.051470391452312469, 0.043382748961448669, 0.071832172572612762, 0.05053015798330307, 0.039511214941740036, } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { -161, 40943, 31057, 14261, 10635, 38129, 8220, 67331, -11539, 7112, 29171, 12835, -445, 29191, 9806, -107, };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 6.6137159592472017e-05, 0.00012824057193938643, 0.00022679136600345373, 0.00016158241487573832, 8.4571511251851916e-05, 0.00041448755655437708, 5.8986872318200767e-05, 1.7644404579186812e-05, 0.00026051510940305889, 0.00018451768846716732, 0.00074883218621835113, 0.00072724185883998871, 0.0001860100164776668, 0.00020944225252605975, 0.003907486330717802, } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,18,-84,-125,39,-67,80,-75,-90,-3,-6,31,-127,5,55,-73, 51,25,-127,127,127,-127,127,-127,-85,127,-127,53,-105,6,127,-25, 24,-24,92,-2,-71,63,-90,78,-95,-27,5,-14,61,1,-100,-29, 
  /* [0][1][][] */ -127,127,-27,14,-43,11,-26,14,-28,1,4,-108,-49,9,-28,-14, -78,-43,-61,-14,-7,-29,11,-27,-108,-88,21,-11,-104,-127,2,23, 14,1,64,3,3,29,-22,35,-127,7,0,2,-21,12,-3,43, 
  /* [0][2][][] */ -115,-75,62,3,-6,33,-36,52,-76,0,0,4,40,2,-25,23, 23,-5,27,-1,-27,35,-30,21,-125,-13,1,84,-58,1,-27,-111, 21,-8,17,1,4,11,12,24,-115,5,-1,-127,107,2,18,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0028108290862292051, 0.0054502245038747787, 0.0096386326476931572, 0.0068672527559101582, 0.0035942890681326389, 0.017615720629692078, 0.0025069420225918293, 0.00074988714186474681, 0.011071891523897648, 0.0078420015051960945, 0.031825367361307144, 0.030907778069376945, 0.0079054255038499832, 0.0089012952521443367, 0.16606816649436951, } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&g0::quant8_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 24657, -223343, 16594, 161684, -8886, 69326, -85323, -243744, 27896, 48448, 1466571, -1073741824, 52372, 48595, -1073741824, };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00014003358955960721, 8.1519050581846386e-05, 4.8608817451167852e-05, 1.8071323211188428e-05, 0.00018919234571512789, 4.6834622480673715e-05, 0.0002070944756269455, 5.4972256293694954e-06, 5.5995074944803491e-05, 7.1359121648129076e-05, 3.984306658821879e-06, 1.1533876076441629e-09, 7.7560791396535933e-05, 3.6713518056785688e-05, 1.243374708748135e-10, } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 30,-1,32, -6,-23,33, -106,-127,-19, 
  /* [1][1][][] */ -4,-9,-4, -20,-3,-5, -13,-50,-7, 
  /* [1][2][][] */ -10,7,-17, -2,7,-15, 20,-23,-17, 
  /* [2][0][][] */ 63,53,-2, 74,116,-18, 60,-1,10, 
  /* [2][1][][] */ 32,53,2, 65,127,-30, 48,29,3, 
  /* [2][2][][] */ 82,-11,34, 86,-3,-5, 50,-13,28, 
  /* [3][0][][] */ 17,29,-4, 43,112,25, -8,-18,7, 
  /* [3][1][][] */ 15,26,-7, 61,127,31, -39,-51,13, 
  /* [3][2][][] */ 18,3,8, 9,7,1, -21,-21,21, 
  /* [4][0][][] */ 30,43,6, 18,34,-15, -3,-5,-19, 
  /* [4][1][][] */ -12,18,35, -3,49,17, 10,46,-8, 
  /* [4][2][][] */ 46,114,37, 28,127,9, 2,68,23, 
  /* [5][0][][] */ 35,-30,-87, 19,-24,-127, 27,26,-62, 
  /* [5][1][][] */ 27,-96,-92, 16,-95,-89, 31,1,-31, 
  /* [5][2][][] */ 30,12,-7, 34,-9,-4, 39,16,-35, 
  /* [6][0][][] */ 38,-60,20, 53,-82,37, 14,-21,7, 
  /* [6][1][][] */ 44,-96,47, 66,-127,61, 15,-30,7, 
  /* [6][2][][] */ 28,-33,9, 22,-41,24, 0,13,-4, 
  /* [7][0][][] */ -7,52,42, -113,-21,42, -6,51,48, 
  /* [7][1][][] */ 18,34,53, -127,-69,46, 18,24,60, 
  /* [7][2][][] */ -7,69,40, -7,35,46, -13,47,44, 
  /* [8][0][][] */ 123,121,77, 97,87,77, 84,85,77, 
  /* [8][1][][] */ 125,123,78, 123,119,77, 120,86,78, 
  /* [8][2][][] */ 127,124,76, 125,122,77, 123,89,77, 
  /* [9][0][][] */ -24,21,15, -12,19,-1, -3,-6,-25, 
  /* [9][1][][] */ 108,127,-23, 69,112,-9, -5,20,20, 
  /* [9][2][][] */ -48,-70,14, -17,-65,23, 8,9,9, 
  /* [10][0][][] */ -28,-87,-18, 32,94,20, -10,-14,-2, 
  /* [10][1][][] */ -63,-109,-16, 79,127,13, -18,-28,-2, 
  /* [10][2][][] */ -35,-24,-1, 36,21,-14, -8,-2,5, 
  /* [11][0][][] */ -71,-61,33, -52,-84,34, -29,-127,-21, 
  /* [11][1][][] */ -97,-69,27, -88,-100,-2, -59,-92,-29, 
  /* [11][2][][] */ -12,-50,-123, 116,120,24, -48,1,-89, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -54,-97,-18, -65,-111,-24, -13,-17,-5, 
  /* [13][1][][] */ 59,115,15, 54,127,25, 3,15,10, 
  /* [13][2][][] */ -10,-16,4, -3,-17,-1, -5,3,-4, 
  /* [14][0][][] */ 38,-15,-37, 73,-27,-47, 36,-8,-25, 
  /* [14][1][][] */ 83,-17,-79, 127,-31,-89, 66,-12,-47, 
  /* [14][2][][] */ 55,-8,-64, 72,-15,-69, 27,-2,-35, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.035708561539649963, 0.020787356421351433, 0.01239524781703949, 0.0046081873588263988, 0.048244044184684753, 0.011942828074097633, 0.052809089422225952, 0.0014017923967912793, 0.014278743416070938, 0.018196575343608856, 0.0010159981902688742, 2.9411381774480105e-07, 0.019778000190854073, 0.0093619469553232193, 3.1706054670621597e-08, } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.49682095646858215, } };
const TfArray<1, int> quant46_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.38178056478500366, } };
const TfArray<1, int> quant50_zero = { 1, { 14 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<1, float> quant53_scale = { 1, { 0.47178530693054199, } };
const TfArray<1, int> quant53_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<1, float> quant54_scale = { 1, { 0.55338805913925171, } };
const TfArray<1, int> quant54_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.26567623019218445, } };
const TfArray<1, int> quant58_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant61_scale = { 1, { 0.26600438356399536, } };
const TfArray<1, int> quant61_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<1, float> quant62_scale = { 1, { 0.27868252992630005, } };
const TfArray<1, int> quant62_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<1, float> quant65_scale = { 1, { 0.22232833504676819, } };
const TfArray<1, int> quant65_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<1, float> quant66_scale = { 1, { 0.38055521249771118, } };
const TfArray<1, int> quant66_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.079834051430225372, } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.17368802428245544, } };
const TfArray<1, int> quant69_zero = { 1, { -21 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 432), (TfLiteIntArray*)&g0::tensor_dimension69, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension69, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
